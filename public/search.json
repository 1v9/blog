[{"title":"Windows Terminal 设置","url":"/post/windows-terminal-settings.html","content":"<p><a href=\"https://github.com/microsoft/terminal\" target=\"_blank\" rel=\"noopener\">Windows Terminal</a> 可以从 <a href=\"https://www.microsoft.com/store/apps/9n0dx20hk701\" target=\"_blank\" rel=\"noopener\">Microsoft Store</a> 下载安装。<a id=\"more\"></a></p>\n<h1 id=\"访问设置\" class=\"heading-control\"><a href=\"#访问设置\" class=\"headerlink\" title=\"访问设置\"></a>访问设置<a class=\"heading-anchor\" href=\"#访问设置\" aria-hidden=\"true\"></a></h1><blockquote>\n<p>截至目前（2019/8/6）终端所有的选项都通过打开一个名为 profiles.json 的配置文件进行修改。</p>\n</blockquote>\n<p>一番研究后发现有两套路径。</p>\n<ul>\n<li>以正常方式打开的终端可执行程序对应此配置文件：</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">C:</span><span class=\"string\">\\Users\\mkb\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\RoamingState\\profiles.json</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>需要修改用户权限才可以访问的终端可执行程序及其配置文件路径如下：</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">C:</span><span class=\"string\">\\Users\\mkb\\AppData\\Roaming\\Microsoft\\Windows</span> <span class=\"string\">Terminal\\profiles.json</span></span><br><span class=\"line\"><span class=\"attr\">C:</span><span class=\"string\">\\Program</span> <span class=\"string\">Files\\WindowsApps\\Microsoft.WindowsTerminal_0.3.2142.0_x64__8wekyb3d8bbwe\\WindowsTerminal.exe</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改字体\" class=\"heading-control\"><a href=\"#修改字体\" class=\"headerlink\" title=\"修改字体\"></a>修改字体<a class=\"heading-anchor\" href=\"#修改字体\" aria-hidden=\"true\"></a></h1><p>对于我来说终端没有什么特殊用途，唯一需要修改的地方就是字体，默认字体下访问我的 Debian VPS 后过于辣眼睛。打开配置文件，搜索 <code>fontFace</code>，不出意外你应该可以找到两个以上的结果。以我个人为例，有三处 <code>fontFace</code> 分别控制着 <code>powershell.exe</code>、<code>cmd.exe</code> 以及 <code>wsl.exe -d Debian</code> 的字体选项。我的主力是 PowerShell，所以仅仅修改了它的字体。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"profiles\"</span> <span class=\"string\">:</span> </span><br><span class=\"line\"><span class=\"string\">[</span></span><br><span class=\"line\">    <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"string\">...</span></span><br><span class=\"line\">        <span class=\"string\">\"commandline\"</span> <span class=\"string\">:</span> <span class=\"string\">\"powershell.exe\"</span><span class=\"string\">,</span></span><br><span class=\"line\">        <span class=\"string\">\"fontFace\"</span> <span class=\"string\">:</span> <span class=\"string\">\"DejaVu Sans Mono for Powerline\"</span><span class=\"string\">,</span></span><br><span class=\"line\">        <span class=\"string\">\"fontSize\"</span> <span class=\"string\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"string\">...</span></span><br><span class=\"line\">    <span class=\"string\">&#125;,</span></span><br><span class=\"line\">    <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"string\">...</span></span><br><span class=\"line\">        <span class=\"string\">\"commandline\"</span> <span class=\"string\">:</span> <span class=\"string\">\"cmd.exe\"</span><span class=\"string\">,</span></span><br><span class=\"line\">        <span class=\"string\">\"fontFace\"</span> <span class=\"string\">:</span> <span class=\"string\">\"Consolas\"</span><span class=\"string\">,</span></span><br><span class=\"line\">        <span class=\"string\">\"fontSize\"</span> <span class=\"string\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"string\">...</span></span><br><span class=\"line\">    <span class=\"string\">&#125;,</span></span><br><span class=\"line\">    <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"string\">...</span></span><br><span class=\"line\">        <span class=\"string\">\"commandline\"</span> <span class=\"string\">:</span> <span class=\"string\">\"wsl.exe -d Debian\"</span><span class=\"string\">,</span></span><br><span class=\"line\">        <span class=\"string\">\"fontFace\"</span> <span class=\"string\">:</span> <span class=\"string\">\"Consolas\"</span><span class=\"string\">,</span></span><br><span class=\"line\">        <span class=\"string\">\"fontSize\"</span> <span class=\"string\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"string\">...</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>目前 Windows 10 安装字体很方便，安装方式多样。我在 VPS 中使用了 <a href=\"https://github.com/powerline/fonts\" target=\"_blank\" rel=\"noopener\">Powerline fonts</a>，为了在本地的 Windows 10 获取同样良好的字体效果，同样需要安装 Powerline fonts，区别仅仅是克隆仓库后运行 <code>install.ps1</code> 而不是 Linux 下运行的 <code>install.sh</code>。</p>\n<p>简单地说，找到你要修改的字体，确保它可用，修改即可。</p>\n<h1 id=\"其他选项\" class=\"heading-control\"><a href=\"#其他选项\" class=\"headerlink\" title=\"其他选项\"></a>其他选项<a class=\"heading-anchor\" href=\"#其他选项\" aria-hidden=\"true\"></a></h1><p>微软日后应该会提供 GUI 控制选项，另外配置文件清晰明了，所以各位可以自行折腾。</p>\n","categories":["Windows"],"tags":["Windows"]},{"title":"NexT 添加今日诗词","url":"/post/add-today-poetry-for-theme-next.html","content":"<div class=\"note info\">\n            <p><img alt=\"今日诗词\" data-src=\"https://v2.jinrishici.com/one.svg\"></p>\n          </div>\n\n<p><a href=\"https://www.jinrishici.com/\" target=\"_blank\" rel=\"noopener\">今日诗词</a>的调用并不复杂，之前使用的 <code>footer.custom_text</code> 选项由于 <a href=\"https://github.com/theme-next/hexo-theme-next/pull/868\" target=\"_blank\" rel=\"noopener\">theme_inject</a> 的合并已经废弃，所以对本文进行一次更新，另外将标签转移到了正文结束的位置。<a id=\"more\"></a></p>\n<h1 id=\"准备工作\" class=\"heading-control\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作<a class=\"heading-anchor\" href=\"#准备工作\" aria-hidden=\"true\"></a></h1><p>首先通过 <code>_config.yml</code> 启用选项：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\"><span class=\"attr\">  postBodyEnd:</span> <span class=\"string\">source/_data/post-body-end.swig</span></span><br><span class=\"line\"><span class=\"attr\">  bodyEnd:</span> <span class=\"string\">source/_data/body-end.swig</span></span><br><span class=\"line\"><span class=\"attr\">  style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"简单使用\" class=\"heading-control\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用<a class=\"heading-anchor\" href=\"#简单使用\" aria-hidden=\"true\"></a></h1><p>最基础的设置参考 <a href=\"https://www.jinrishici.com/doc/#json-fast-easy\" target=\"_blank\" rel=\"noopener\">通用简单安装代码</a>。</p>\n<p>首先在 <code>source/_data/body-end.swig</code> 文件内引入今日诗词的 SDK：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://sdk.jinrishici.com/v2/browser/jinrishici.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>source/_data/post-body-end.swig</code> 文件内放入标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jinrishici-sentence\"</span>&gt;</span>正在加载今日诗词....<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"高级使用\" class=\"heading-control\"><a href=\"#高级使用\" class=\"headerlink\" title=\"高级使用\"></a>高级使用<a class=\"heading-anchor\" href=\"#高级使用\" aria-hidden=\"true\"></a></h1><p>简单使用的话不显示作者、朝代等信息，参考 <a href=\"https://www.jinrishici.com/doc/#json-fast-custom\" target=\"_blank\" rel=\"noopener\">通用高级安装代码</a> 以及 <a href=\"https://www.jinrishici.com/doc/#return\" target=\"_blank\" rel=\"noopener\">接口返回结果格式</a>，值得注意的地方是这一句话：</p>\n<div class=\"note info\">\n            <p>使用定制加载时，不要将标签的 id 或者 class 设置为 jinrishici-sentence ，否则SDK会自动加载一次。</p>\n          </div>\n\n<p>也就是说插入的标签不应该使用之前的 <strong>jinrishici-sentence</strong>，需要重新命名。参考上一节配置的两个文件，把内容修改一下即可：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//sdk.jinrishici.com/v2/browser/jinrishici.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'今日诗词 - 开始加载...'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  jinrishici.load(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> jrsc = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'jrsc'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">if</span> (jrsc) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'今日诗词 - 标签获取成功.'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'今日诗词 - 标签获取失败!'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">const</span> data = result.data;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> author = data.origin.author;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> title = <span class=\"string\">'《'</span> + data.origin.title + <span class=\"string\">'》'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> content = data.content.substr(<span class=\"number\">0</span>, data.content.length - <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> dynasty = data.origin.dynasty.substr(<span class=\"number\">0</span>, data.origin.dynasty.length - <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    jrsc.innerText = content + <span class=\"string\">' @ '</span> + dynasty + <span class=\"string\">'·'</span> + author + title;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'今日诗词 - 载入完毕.'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">if</span> (data.origin.author == <span class=\"string\">'李白'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> audio = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"audio\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">      audio.src = <span class=\"string\">\"/ding.mp3\"</span>;</span></span><br><span class=\"line\">      audio.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: center\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jrsc\"</span> &gt;</span>正在加载今日诗词....<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"标签样式\" class=\"heading-control\"><a href=\"#标签样式\" class=\"headerlink\" title=\"标签样式\"></a>标签样式<a class=\"heading-anchor\" href=\"#标签样式\" aria-hidden=\"true\"></a></h1><p>NexT 支持自定义样式，在 <code>source/_data/styles.styl</code> 内写入如下内容，请自行发挥：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#jrsc</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-style</span>: italic;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: initial;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: midnightblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"意外\" class=\"heading-control\"><a href=\"#意外\" class=\"headerlink\" title=\"意外\"></a>意外<a class=\"heading-anchor\" href=\"#意外\" aria-hidden=\"true\"></a></h1><p>因为今日诗词是网页客户端调用以及它本身的地理推荐机制，我竟然被 《春江花月夜》 困住了，😂。</p>\n","categories":["NexT"],"tags":["Hexo","Next"]},{"title":"Pixiv 漫画下载脚本","url":"/post/pixiv-manga-download-script.html","content":"<p>这是我编写的一个低智能的用来下载 pixiv 漫画的 Bash 脚本，需要输入漫画图片的准确数量以及第一张漫画图片的完整地址，依赖 <a href=\"https://github.com/axel-download-accelerator/axel\" target=\"_blank\" rel=\"noopener\">Axel</a> 与 <a href=\"https://www.perl.org/\" target=\"_blank\" rel=\"noopener\">Perl</a>。<a id=\"more\"></a></p>\n<h1 id=\"简介\" class=\"heading-control\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介<a class=\"heading-anchor\" href=\"#简介\" aria-hidden=\"true\"></a></h1><p>目前已经有很多成熟的 pixiv 爬取工具，利用 Pyhton、JavaScript 等等，但是我拒绝。Bash 按顺序执行的特点太适合我这样的非编程人士了。</p>\n<h1 id=\"脚本\" class=\"heading-control\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本<a class=\"heading-anchor\" href=\"#脚本\" aria-hidden=\"true\"></a></h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/<span class=\"built_in\">local</span>/bin:/usr/<span class=\"built_in\">local</span>/sbin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出样式</span></span><br><span class=\"line\">Info_font=<span class=\"string\">'\\e[32;49;1m'</span></span><br><span class=\"line\">Warning_font=<span class=\"string\">'\\033[31m'</span></span><br><span class=\"line\">Font_color=<span class=\"string\">'\\033[39;49;0m'</span></span><br><span class=\"line\">Info=<span class=\"string\">\"<span class=\"variable\">$&#123;Info_font&#125;</span>[信息]<span class=\"variable\">$&#123;Font_color&#125;</span>\"</span></span><br><span class=\"line\">Warning=<span class=\"string\">\"<span class=\"variable\">$&#123;Warning_font&#125;</span>[警告]<span class=\"variable\">$&#123;Font_color&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检测 axel、perl</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> axel &gt;/dev/null 2&gt;&amp;1 || &#123; <span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$&#123;Warning&#125;</span> 请检查 axel!\"</span>; <span class=\"built_in\">exit</span> 1; &#125;</span><br><span class=\"line\"><span class=\"built_in\">type</span> perl &gt;/dev/null 2&gt;&amp;1 || &#123; <span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$&#123;Warning&#125;</span> 请检查 perl!\"</span>; <span class=\"built_in\">exit</span> 1; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取输入</span></span><br><span class=\"line\"><span class=\"comment\">#read -p \"请输入图片数量以及第一张图片的完整地址:\" all url</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">\"请输入图片数量:\"</span> all</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">\"请输入第一张图片的完整地址:\"</span> url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 处理 $url，$id 和 $prefix 的获取比较生硬</span></span><br><span class=\"line\">id=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$url</span> | cut -c56-63)</span><br><span class=\"line\">prefix=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$url</span> | cut -c56-65)</span><br><span class=\"line\">suffix=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$url</span> | cut -f4 -d<span class=\"string\">\".\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在主目录下创建目录，名称是漫画 id </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> &amp;&amp; mkdir <span class=\"string\">\"<span class=\"variable\">$id</span>\"</span> &amp;&amp; <span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$id</span>\"</span> || <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"comment\"># 写入下载地址</span></span><br><span class=\"line\">list=url.txt</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$url</span> | sed <span class=\"string\">'s/master/original/1;s/_master1200//'</span> &gt; <span class=\"variable\">$list</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(cat <span class=\"variable\">$list</span>) ; <span class=\"keyword\">do</span> seq 1 <span class=\"variable\">$all</span> | xargs -i -- <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$i</span>\"</span> &gt; <span class=\"variable\">$list</span>; <span class=\"keyword\">done</span></span><br><span class=\"line\">perl -pi -e <span class=\"string\">'s/(p)(0)(.)/sprintf(\"%s%d%s\",$1,$kv&#123;\"$1$2$3\"&#125;++,$3)/ge'</span> <span class=\"variable\">$list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 axel 依次下载文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$&#123;Info&#125;</span> 开始下载文件.\"</span></span><br><span class=\"line\">cat <span class=\"variable\">$list</span> | xargs -l1 axel -ackv -n 13 -H <span class=\"string\">\"Referer: https://www.pixiv.net/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 任务结束</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$&#123;Info&#125;</span> 文件下载完毕.\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$&#123;Info&#125;</span> 重命名并检查文件数量.\"</span></span><br><span class=\"line\">ls *<span class=\"string\">\"<span class=\"variable\">$suffix</span>\"</span> | awk -F <span class=\"string\">\"<span class=\"variable\">$prefix</span>\"</span> <span class=\"string\">'&#123;print \"mv \"$0\" \"$1$2\"\"&#125;'</span> | <span class=\"variable\">$SHELL</span></span><br><span class=\"line\">result=$(ls *<span class=\"string\">\"<span class=\"variable\">$suffix</span>\"</span> | wc -l)</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$result</span>\"</span> = <span class=\"string\">\"<span class=\"variable\">$all</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$&#123;Info&#125;</span> 任务完成.\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$&#123;Warning&#125;</span> 请 进入 \"</span><span class=\"variable\">$id</span><span class=\"string\">\" 目录查看情况.\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用\" class=\"heading-control\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用<a class=\"heading-anchor\" href=\"#使用\" aria-hidden=\"true\"></a></h1><blockquote>\n<p>脚本已发布至我的 <a href=\"https://gist.github.com/1v9/3be9dd61a30d08b6f47199490dd03afc\" target=\"_blank\" rel=\"noopener\">Gist</a>，你可以自行测试使用或者直接使用以下命令安装到你的系统。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://gist.githubusercontent.com/1v9/3be9dd61a30d08b6f47199490dd03afc/raw/2b3080283463db940ddef2f38c25c0769fa89167/pixiv.sh</span><br><span class=\"line\">mv pixiv.sh /usr/<span class=\"built_in\">local</span>/bin/pixiv</span><br><span class=\"line\">chmod a+x /usr/<span class=\"built_in\">local</span>/bin/pixiv</span><br><span class=\"line\"><span class=\"built_in\">which</span> pixiv</span><br></pre></td></tr></table></figure>\n<p>打开你的本地或远程终端运行 pixiv 命令，我建议使用国外的 vps 下载，国内使用脚本下载基本上卡死不动，或者你很熟悉如何在命令行内使用代理，也可以自行修改 <a href=\"https://gist.github.com/1v9/3be9dd61a30d08b6f47199490dd03afc#file-pixiv-sh-L28\" target=\"_blank\" rel=\"noopener\">此处</a>。</p>\n<h1 id=\"展示\" class=\"heading-control\"><a href=\"#展示\" class=\"headerlink\" title=\"展示\"></a>展示<a class=\"heading-anchor\" href=\"#展示\" aria-hidden=\"true\"></a></h1><p>为了和谐直接放录屏。</p>\n<p><img alt data-src=\"https://i.loli.net/2019/02/23/5c707311949ab.gif\"></p>\n","categories":["Bash"],"tags":["Bash","Pixiv"]},{"title":"编译安装 NGINX","url":"/post/compiling-and-installing-nginx.html","content":"<div class=\"note info\">\n            <p>本文翻译修改自 <a href=\"https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#compiling-and-installing-from-source\" target=\"_blank\" rel=\"noopener\">NGINX Docs | Installing NGINX Open Source</a>.</p>\n          </div>\n\n<p>相对于预构建软件包，从源代码编译 NGINX 的开源版本提供了更多的灵活性，你可以从 NGINX 或者第三方添加特定模块，并应用最新的安全补丁。<a id=\"more\"></a></p>\n<h1 id=\"安装-NGINX-依赖\" class=\"heading-control\"><a href=\"#安装-NGINX-依赖\" class=\"headerlink\" title=\"安装 NGINX 依赖\"></a>安装 NGINX 依赖<a class=\"heading-anchor\" href=\"#安装-NGINX-依赖\" aria-hidden=\"true\"></a></h1><p>在最终编译之前，你可能需要安装多个依赖：</p>\n<ul>\n<li><a href=\"https://www.pcre.org/\" target=\"_blank\" rel=\"noopener\">PCRE</a> - 提供正则表达式支持，NGINX <a href=\"https://nginx.org/en/docs/ngx_core_module.html\" target=\"_blank\" rel=\"noopener\">Core</a> 以及 <a href=\"https://nginx.org/en/docs/http/ngx_http_rewrite_module.html\" target=\"_blank\" rel=\"noopener\">Rewrite</a> 模块所需。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz</span><br><span class=\"line\">tar -zxf pcre-8.43.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> pcre-8.43</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://www.zlib.net/\" target=\"_blank\" rel=\"noopener\">zlib</a> - 提供报头压缩支持，NGINX <a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_module.html\" target=\"_blank\" rel=\"noopener\">Gzip</a> 模块所需。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://www.zlib.net/zlib-1.2.11.tar.gz</span><br><span class=\"line\">tar -zxf zlib-1.2.11.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> zlib-1.2.11</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://www.openssl.org/\" target=\"_blank\" rel=\"noopener\">OpenSSL</a> - 提供 HTTPS 协议支持，NGINX <a href=\"https://nginx.org/en/docs/http/ngx_http_ssl_module.html\" target=\"_blank\" rel=\"noopener\">SSL</a> 模块所需。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.1.1d.tar.gz</span><br><span class=\"line\">tar -zxf openssl-1.1.1d.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> openssl-1.1.1d</span><br><span class=\"line\">./configure darwin64-x86_64-cc --prefix=/usr</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"下载源码\" class=\"heading-control\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码<a class=\"heading-anchor\" href=\"#下载源码\" aria-hidden=\"true\"></a></h1><p>从 <a href=\"https://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">nginx.org</a> 下载稳定版本或主线版本的源码。</p>\n<p>下载并解压最新主线版本的源码，请运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://nginx.org/download/nginx-1.17.3.tar.gz</span><br><span class=\"line\">tar zxf nginx-1.17.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.17.3</span><br></pre></td></tr></table></figure>\n\n<p>下载并解压最新稳定版本的源码，请运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class=\"line\">tar zxf nginx-1.16.1.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.16.1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置构建选项\" class=\"heading-control\"><a href=\"#配置构建选项\" class=\"headerlink\" title=\"配置构建选项\"></a>配置构建选项<a class=\"heading-anchor\" href=\"#配置构建选项\" aria-hidden=\"true\"></a></h1><p>配置选项由 ./configure 脚本设置各种 NGINX 参数来声明，包括源码路径、连接处理方法以及模块列表。脚本运行完毕后将会创建编译 NGINX 所需的 Makefile 文件。</p>\n<p>配置脚本使用示例（使用 \\ 实现换行）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">--sbin-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx \\</span><br><span class=\"line\">--conf-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.conf \\</span><br><span class=\"line\">--pid-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.pid \\</span><br><span class=\"line\">--with-pcre=../pcre-8.42 \\</span><br><span class=\"line\">--with-zlib=../zlib-1.2.11 \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-mail=dynamic \\</span><br><span class=\"line\">--add-module=/usr/build/nginx-rtmp-module \\</span><br><span class=\"line\">--add-dynamic-module=/usr/build/3party_module</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-NGINX-路径\" class=\"heading-control\"><a href=\"#配置-NGINX-路径\" class=\"headerlink\" title=\"配置 NGINX 路径\"></a>配置 NGINX 路径<a class=\"heading-anchor\" href=\"#配置-NGINX-路径\" aria-hidden=\"true\"></a></h2><p>配置脚本允许设置 NGINX 二进制文件、配置文件的路径，也支持设置依赖库（如 PCRE 或 SSL）的路径，以便将它们静态链接到 NGINX 二进制文件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>--prefix=&lt;PATH&gt;</td>\n<td>NGINX 的安装目录，配置脚本（不包括库的路径）设置中的 NGINX 缺省路径相对于此目录。默认值：/usr/local/nginx。</td>\n</tr>\n<tr>\n<td>--sbin-path=&lt;PATH&gt;</td>\n<td>NGINX 可执行文件路径，仅在安装期间使用。默认值：&lt;prefix&gt;/sbin/nginx。</td>\n</tr>\n<tr>\n<td>--conf-path=&lt;PATH&gt;</td>\n<td>NGINX 配置文件路径。你可以通过 nginx 命令行使用 -c &lt;FILENAME&gt; 指定其他文件来覆盖此设置。默认值：&lt;prefix&gt;/conf/nginx.conf。</td>\n</tr>\n<tr>\n<td>--pid-path=&lt;PATH&gt;</td>\n<td>nginx.pid 文件路径，用于存储 nginx 主进程的进程ID 。安装后可以使用 NGINX 配置文件中的 <a href=\"https://nginx.org/en/docs/ngx_core_module.html#pid\" target=\"_blank\" rel=\"noopener\">pid</a> 指令更改。默认值：&lt;prefix&gt;/logs/nginx.pid。</td>\n</tr>\n<tr>\n<td>--error-log-path=&lt;PATH&gt;</td>\n<td>错误，警告和诊断数据的主日志文件路径。安装后可以使用 NGINX 配置文件中的 <a href=\"https://nginx.org/en/docs/ngx_core_module.html#error_log\" target=\"_blank\" rel=\"noopener\">error_log</a> 指令更改。默认值：&lt;prefix&gt;/logs/error.log。</td>\n</tr>\n<tr>\n<td>--http-log-path=&lt;PATH&gt;</td>\n<td>记录 HTTP 请求的主日志文件路径，也就是访问日志。安装后同样可以使用 NGINX 配置文件中的 <a href=\"https://nginx.org/en/docs/http/ngx_http_log_module.html#access_log\" target=\"_blank\" rel=\"noopener\">access_log</a> 指令进行修改。默认值：&lt;prefix&gt;/logs/access.log。</td>\n</tr>\n<tr>\n<td>--user=&lt;NAME&gt;</td>\n<td>NGINX 工作进程使用其凭据的非特权用户的名称。安装后可以使用 NGINX 配置文件中的 <a href=\"https://nginx.org/en/docs/ngx_core_module.html#user\" target=\"_blank\" rel=\"noopener\">user</a> 指令更改。默认：nobody。</td>\n</tr>\n<tr>\n<td>--group=&lt;NAME&gt;</td>\n<td>NGINX工作进程使用其凭据的组的名称。安装后可以使用 NGINX 配置文件中的 <a href=\"https://nginx.org/en/docs/ngx_core_module.html#user\" target=\"_blank\" rel=\"noopener\">user</a> 指令更改。默认值：--user 选项设定的值。</td>\n</tr>\n<tr>\n<td>--with-pcre=&lt;PATH&gt;</td>\n<td>PCRE 库源代码的路径，<a href=\"https://nginx.org/en/docs/http/ngx_http_core_module.html#location\" target=\"_blank\" rel=\"noopener\">location</a> 指令和 <a href=\"https://nginx.org/en/docs/http/ngx_http_rewrite_module.html\" target=\"_blank\" rel=\"noopener\">Rewrite</a> 模块正则表达式支持所需。</td>\n</tr>\n<tr>\n<td>--with-pcre-jit</td>\n<td>启用即时编译支持（<a href=\"https://nginx.org/en/docs/ngx_core_module.html#pcre_jit\" target=\"_blank\" rel=\"noopener\">pcre_jit</a> 指令）构建 PCRE 库。</td>\n</tr>\n<tr>\n<td>--with-zlib=&lt;PATH&gt;</td>\n<td>zlib 库的源代码路径，<a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_module.html\" target=\"_blank\" rel=\"noopener\">Gzip</a> 模块需要该路径。</td>\n</tr>\n</tbody></table>\n<h2 id=\"配置-NGINX-GCC-选项\" class=\"heading-control\"><a href=\"#配置-NGINX-GCC-选项\" class=\"headerlink\" title=\"配置 NGINX GCC 选项\"></a>配置 NGINX GCC 选项<a class=\"heading-anchor\" href=\"#配置-NGINX-GCC-选项\" aria-hidden=\"true\"></a></h2><p>使用配置脚本，你还可以指定与编译器相关的选项。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>--with-cc-opt=&quot;&lt;PARAMETERS&gt;&quot;</td>\n<td>额外添加到 CFLAGS 变量的参数。FreeBSD 下使用系统的 PCRE 库编译时强制值为 --with-cc-opt=&quot;-I /usr/local/include&quot;。如果想增加 select() 所支持的文件数量也可以在此声明，比如 --with-cc-opt=&quot;-D FD_SETSIZE=2048&quot;。</td>\n</tr>\n<tr>\n<td>--with-ld-opt=&quot;&lt;PARAMETERS&gt;&quot;</td>\n<td>链接所需的额外参数。FreeBSD 下使用系统的 PCRE 库编译时强制值为 --with-ld-opt= &quot;-L /usr/local/lib&quot;。</td>\n</tr>\n</tbody></table>\n<h2 id=\"指定-NGINX-连接处理方法\" class=\"heading-control\"><a href=\"#指定-NGINX-连接处理方法\" class=\"headerlink\" title=\"指定 NGINX 连接处理方法\"></a>指定 NGINX 连接处理方法<a class=\"heading-anchor\" href=\"#指定-NGINX-连接处理方法\" aria-hidden=\"true\"></a></h2><p>使用配置脚本，你可以重新定义基于事件的轮询的方法。参阅 NGINX 文档中的 <a href=\"https://nginx.org/en/docs/events.html\" target=\"_blank\" rel=\"noopener\">Connection processing methods</a> 获取更多信息。</p>\n<table>\n<thead>\n<tr>\n<th>模块名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>--with-select_module, --without-select_module</td>\n<td>启用或禁用实现 select() 支持的模块，如果系统不支持更合适的方法（如 kqueue，epoll 或 /dev/poll）则会自动构建此模块。</td>\n</tr>\n<tr>\n<td>--with-poll_module, --without-poll_module</td>\n<td>启用或禁用实现 poll() 支持的模块，如果系统不支持更合适的方法（如 kqueue，epoll 或 /dev/poll）则会自动构建此模块。</td>\n</tr>\n</tbody></table>\n<h2 id=\"选择要构建的-NGINX-模块\" class=\"heading-control\"><a href=\"#选择要构建的-NGINX-模块\" class=\"headerlink\" title=\"选择要构建的 NGINX 模块\"></a>选择要构建的 NGINX 模块<a class=\"heading-anchor\" href=\"#选择要构建的-NGINX-模块\" aria-hidden=\"true\"></a></h2><p>NGINX 由具有特定功能的模块组成，这些模块可以通过配置脚本包含选项来指定构建。</p>\n<p>默认情况下 NGINX 会构建若干模块 - 不必使用配置脚本指定它们。你也可以使用 <code>--without-&lt;MODULE-NAME&gt;</code> 选项明确排除特定的模块。</p>\n<p>默认情况下未包含的模块以及第三方模块必须在配置脚本中与其他构建选项一起显式指定。这些模块可以静态链接（每次 NGINX 启动时加载它们）或者动态链接（只有在 NGINX 配置文件中包含相关指令时才加载它们）到 NGINX 二进制文件。</p>\n<h2 id=\"默认构建的模块\" class=\"heading-control\"><a href=\"#默认构建的模块\" class=\"headerlink\" title=\"默认构建的模块\"></a>默认构建的模块<a class=\"heading-anchor\" href=\"#默认构建的模块\" aria-hidden=\"true\"></a></h2><p>如果你不需要某个默认构建的模块，你可以通过配置脚本使用 <code>--without-&lt;MODULE-NAME&gt;</code> 选项进行排除，以下示例禁用了 <a href=\"https://nginx.org/en/docs/http/ngx_http_empty_gif_module.html\" target=\"_blank\" rel=\"noopener\">Empty GIF</a> 模块：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">--sbin-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx \\</span><br><span class=\"line\">--conf-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.conf \\</span><br><span class=\"line\">--pid-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.pid \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-pcre=../pcre-8.43 \\</span><br><span class=\"line\">--with-zlib=../zlib-1.2.11 \\</span><br><span class=\"line\">--without-http_empty_gif_module</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>模块名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_access_module.html\" target=\"_blank\" rel=\"noopener\">http_access_module</a></td>\n<td>接受或拒绝来自指定客户端地址的请求。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html\" target=\"_blank\" rel=\"noopener\">http_auth_basic_module</a></td>\n<td>通过使用 HTTP 基本身份验证协议验证用户名和密码来限制对资源的访问。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_autoindex_module.html\" target=\"_blank\" rel=\"noopener\">http_autoindex_module</a></td>\n<td>处理以正斜杠字符 / 结尾的请求，并生成目录列表。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_browser_module.html\" target=\"_blank\" rel=\"noopener\">http_browser_module</a></td>\n<td>创建其值取决于 User-Agent 请求标头值的变量。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_charset_module.html\" target=\"_blank\" rel=\"noopener\">http_charset_module</a></td>\n<td>将指定的字符集添加到 Content-Type 响应标头。可以将数据从一个字符集转换为另一个字符集。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_empty_gif_module.html\" target=\"_blank\" rel=\"noopener\">http_empty_gif_module</a></td>\n<td>发出单像素透明 GIF。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html\" target=\"_blank\" rel=\"noopener\">http_fastcgi_module</a></td>\n<td>将请求传递给 FastCGI 服务器。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_geo_module.html\" target=\"_blank\" rel=\"noopener\">http_geo_module</a></td>\n<td>使用取决于客户端 IP 地址的值创建变量。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_module.html\" target=\"_blank\" rel=\"noopener\">http_gzip_module</a></td>\n<td>使用 gzip 压缩响应，将传输数据量减少一半或更多。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html\" target=\"_blank\" rel=\"noopener\">http_limit_conn_module</a></td>\n<td>限制每个定义密钥的连接数，特别是来自单个 IP 地址的连接数。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_limit_req_module.html\" target=\"_blank\" rel=\"noopener\">http_limit_req_module</a></td>\n<td>限制每个定义密钥的请求处理速率，特别是来自单个 IP 地址的请求的处理速率。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_map_module.html\" target=\"_blank\" rel=\"noopener\">http_map_module</a></td>\n<td>创建其值取决于其他变量值的变量。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_memcached_module.html\" target=\"_blank\" rel=\"noopener\">http_memcached_module</a></td>\n<td>将请求传递给 memcached 服务器。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_proxy_module.html\" target=\"_blank\" rel=\"noopener\">http_proxy_module</a></td>\n<td>将 HTTP 请求传递给另一台服务器。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_referer_module.html\" target=\"_blank\" rel=\"noopener\">http_referer_module</a></td>\n<td>在 Referer 标头中阻止具有无效值的请求。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_rewrite_module.html\" target=\"_blank\" rel=\"noopener\">http_rewrite_module</a></td>\n<td>使用正则表达式更改请求 URI 并返回重定向; 有条件地选择配置。需要 <a href=\"https://www.pcre.org/\" target=\"_blank\" rel=\"noopener\">PCRE</a> 库。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_scgi_module.html\" target=\"_blank\" rel=\"noopener\">http_scgi_module</a></td>\n<td>将请求传递给 SCGI 服务器。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_ssi_module.html\" target=\"_blank\" rel=\"noopener\">http_ssi_module</a></td>\n<td>在通过它的响应中处理 SSI（服务器端包含）命令。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_split_clients_module.html\" target=\"_blank\" rel=\"noopener\">http_split_clients_module</a></td>\n<td>创建适合 A/B 测试的变量，也称为拆分测试。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_module.html#hash\" target=\"_blank\" rel=\"noopener\">http_upstream_hash_module</a></td>\n<td>启用通用哈希负载平衡方法。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_module.html#ip_hash\" target=\"_blank\" rel=\"noopener\">http_upstream_ip_hash_module</a></td>\n<td>启用 IP 哈希负载平衡方法。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive\" target=\"_blank\" rel=\"noopener\">http_upstream_keepalive_module</a></td>\n<td>启用 keepalive 连接.</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_module.html#least_conn\" target=\"_blank\" rel=\"noopener\">http_upstream_least_conn_module</a></td>\n<td>启用最少连接负载平衡方法。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_upstream_module.html#zone\" target=\"_blank\" rel=\"noopener\">http_upstream_zone_module</a></td>\n<td>启用共享内存区域。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_userid_module.html\" target=\"_blank\" rel=\"noopener\">http_userid_module</a></td>\n<td>设置适合客户端识别的 cookie。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html\" target=\"_blank\" rel=\"noopener\">http_uwsgi_module</a></td>\n<td>将请求传递给 uwsgi 服务器。</td>\n</tr>\n</tbody></table>\n<h2 id=\"包含非默认构建的模块\" class=\"heading-control\"><a href=\"#包含非默认构建的模块\" class=\"headerlink\" title=\"包含非默认构建的模块\"></a>包含非默认构建的模块<a class=\"heading-anchor\" href=\"#包含非默认构建的模块\" aria-hidden=\"true\"></a></h2><p>许多 NGINX 模块默认不进行构建，必须在 configure 命令中额外列出。</p>\n<p><a href=\"https://nginx.org/en/docs/mail/ngx_mail_core_module.html\" target=\"_blank\" rel=\"noopener\">mail</a>, <a href=\"https://nginx.org/en/docs/stream/ngx_stream_core_module.html\" target=\"_blank\" rel=\"noopener\">stream</a>, <a href=\"https://nginx.org/en/docs/http/ngx_http_geoip_module.html\" target=\"_blank\" rel=\"noopener\">geoip</a>, <a href=\"https://nginx.org/en/docs/http/ngx_http_image_filter_module.html\" target=\"_blank\" rel=\"noopener\">image_filter</a>, <a href=\"https://nginx.org/en/docs/http/ngx_http_perl_module.html\" target=\"_blank\" rel=\"noopener\">perl</a> 以及 <a href=\"https://nginx.org/en/docs/http/ngx_http_xslt_module.html\" target=\"_blank\" rel=\"noopener\">xslt</a> 等模块可以动态编译。浏览 <a href=\"https://docs.nginx.com/nginx/admin-guide/dynamic-modules/dynamic-modules/\" target=\"_blank\" rel=\"noopener\">Dynamic Modules</a> 查看细节。</p>\n<p>configure 命令包含非默认构建模块的示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">--sbin-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx \\</span><br><span class=\"line\">--conf-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.conf \\</span><br><span class=\"line\">--pid-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.pid \\</span><br><span class=\"line\">--with-pcre=../pcre-8.42 \\</span><br><span class=\"line\">--with-zlib=../zlib-1.2.11 \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-stream \\</span><br><span class=\"line\">--with-mail</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>模块名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>--with-cpp_test_module</td>\n<td>测试头文件的 C++ 兼容性。</td>\n</tr>\n<tr>\n<td>--with-debug</td>\n<td>启用 <a href=\"https://docs.nginx.com/nginx/admin-guide/monitoring/debugging/\" target=\"_blank\" rel=\"noopener\">Debug 日志</a>。</td>\n</tr>\n<tr>\n<td>--with-file-aio</td>\n<td>启用异步 I/O。</td>\n</tr>\n<tr>\n<td><a href=\"http://nginx.org/en/docs/ngx_google_perftools_module.html\" target=\"_blank\" rel=\"noopener\">--with-google_perftools_module</a></td>\n<td>允许使用 <a href=\"https://github.com/gperftools/gperftools\" target=\"_blank\" rel=\"noopener\">Google Performance tools</a> 库。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_addition_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_addition_module</a></td>\n<td>在响应前后添加文本。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_auth_request_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_auth_request_module</a></td>\n<td>根据子请求的结果实现客户端授权。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_dav_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_dav_module</a></td>\n<td>使用 WebDAV 协议启用文件管理自动化。</td>\n</tr>\n<tr>\n<td>--with-http_degradation_module</td>\n<td>允许在内存大小超过定义值时返回错误。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_flv_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_flv_module</a></td>\n<td>为 FLV 文件提供伪视频流服务端支持。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_geoip_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_geoip_module</a></td>\n<td>允许创建取决于客户端 IP 地址的变量。该模块使用 <a href=\"http://www.maxmind.com/\" target=\"_blank\" rel=\"noopener\">MaxMind</a> GeoIP 数据库。要编译为单独的动态模块请将选项更改为 --with-http_geoip_module=dynamic。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_gunzip_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_gunzip_module</a></td>\n<td>对于不支持 <em>zip</em> encoding 的客户端使用 Content-Encoding: gzip 解压响应。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_static_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_gzip_static_module</a></td>\n<td>允许使用 .gz 文件扩展名而不是常规文件发送预压缩内容。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_image_filter_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_image_filter_module</a></td>\n<td>以 JPEG，GIF和PNG格式转换图像。该模块需要 <a href=\"http://libgd.github.io/\" target=\"_blank\" rel=\"noopener\">LibGD</a> 库。要编译为单独的动态模块请将选项更改为 --with-http_image_filter_module=dynamic。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_mp4_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_mp4_module</a></td>\n<td>为 MP4 文件提供伪视频流服务端支持。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_perl_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_perl_module</a></td>\n<td>用于在 Perl 中实现位置和变量处理，并将 Perl 调用插入 SSI。需要 <a href=\"https://www.perl.org/get.html\" target=\"_blank\" rel=\"noopener\">PERL</a> 库。要编译为单独的动态模块，请将选项更改为 --with-http_perl_module=dynamic。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_random_index_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_random_index_module</a></td>\n<td>处理以斜杠字符 / 结尾的请求，并在此目录中选择一个随机文件作为索引文件。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_realip_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_realip_module</a></td>\n<td>将客户端地址更改为在指定的标头字段中发送的地址。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_secure_link_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_secure_link_module</a></td>\n<td>用于检查请求链接的真实性，保护资源免受未经授权的访问，并限制链接的生命周期。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_slice_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_slice_module</a></td>\n<td>允许将请求拆分为子请求，每个子请求返回一定范围的响应。提供更有效的大文件缓存。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_ssl_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_ssl_module</a></td>\n<td>启用 HTTPS 支持。需要一个 SSL 库，如 <a href=\"https://www.openssl.org/\" target=\"_blank\" rel=\"noopener\">OpenSSL</a>。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_stub_status_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_stub_status_module</a></td>\n<td>提供对 NGINX 基本状态信息的访问。请注意，NGINX Plus 用户不需要此模块，因为它们已经提供了扩展状态指标和交互式的仪表板。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_sub_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_sub_module</a></td>\n<td>替换指定字符串来修改响应。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_xslt_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_xslt_module</a></td>\n<td>使用一个或多个 XSLT 样式表转换 XML 响应。该模块需要 <a href=\"http://xmlsoft.org/\" target=\"_blank\" rel=\"noopener\">Libxml2</a> 和 <a href=\"http://xmlsoft.org/XSLT/\" target=\"_blank\" rel=\"noopener\">XSLT</a> 库。要编译为单独的动态模块请将选项更改为 --with-http_xslt_module=dynamic。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/http/ngx_http_v2_module.html\" target=\"_blank\" rel=\"noopener\">--with-http_v2_module</a></td>\n<td>启用 HTTP/2 支持。访问 <a href=\"http://www.nginx.com/blog/http2-module-nginx/\" target=\"_blank\" rel=\"noopener\">The HTTP/2 Module in NGINX</a> 获取细节。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/mail/ngx_mail_core_module.html\" target=\"_blank\" rel=\"noopener\">--with-mail</a></td>\n<td>启用邮件代理功能。要编译为单独的动态模块请将选项更改为 --with-mail=dynamic。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/mail/ngx_mail_ssl_module.html\" target=\"_blank\" rel=\"noopener\">--with-mail_ssl_module</a></td>\n<td>为邮件代理服务器提供 SSL/TLS 协议支持。需要一个 SSL 库，如 <a href=\"https://www.openssl.org/\" target=\"_blank\" rel=\"noopener\">OpenSSL</a>。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/stream/ngx_stream_core_module.html\" target=\"_blank\" rel=\"noopener\">--with-stream</a></td>\n<td>启用 TCP 和 UDP 代理功能。要编译为单独的动态模块，请将选项更改为 --with-stream=dynamic。</td>\n</tr>\n<tr>\n<td><a href=\"https://nginx.org/en/docs/stream/ngx_stream_ssl_module.html\" target=\"_blank\" rel=\"noopener\">--with-stream_ssl_module</a></td>\n<td>为流代理服务器提供 SSL/TLS 协议支持。需要一个 SSL 库，如 <a href=\"https://www.openssl.org/\" target=\"_blank\" rel=\"noopener\">OpenSSL</a>。</td>\n</tr>\n<tr>\n<td>--with-threads</td>\n<td>启用线程池。访问 <a href=\"https://www.nginx.com/blog/thread-pools-boost-performance-9x/\" target=\"_blank\" rel=\"noopener\">Thread Pools in NGINX Boost Performance 9x!</a> 获取细节。</td>\n</tr>\n</tbody></table>\n<h2 id=\"包含第三方模块\" class=\"heading-control\"><a href=\"#包含第三方模块\" class=\"headerlink\" title=\"包含第三方模块\"></a>包含第三方模块<a class=\"heading-anchor\" href=\"#包含第三方模块\" aria-hidden=\"true\"></a></h2><p>你可以通过使用自己的模块或第三方模块编译 NGINX 来扩展 NGINX 的功能。<a href=\"https://nginx.com/resources/wiki/modules/\" target=\"_blank\" rel=\"noopener\">NGINX Wiki</a> 中列出了一些第三方模块。使用第三方模块需要自担风险，因为无法保证其稳定性。</p>\n<h3 id=\"静态链接模块\" class=\"heading-control\"><a href=\"#静态链接模块\" class=\"headerlink\" title=\"静态链接模块\"></a>静态链接模块<a class=\"heading-anchor\" href=\"#静态链接模块\" aria-hidden=\"true\"></a></h3><p>NGINX 开源版本中的大多数模块在编译时都是静态链接化的，只有重新编译才可以禁用它们。</p>\n<p>通过 configure 命令包含 <code>--add-module=&lt;PATH&gt;</code> 选项 可以编译这类模块，其中 <path> 是模块的源码路径（示例中为 <a href=\"https://github.com/arut/nginx-rtmp-module\" target=\"_blank\" rel=\"noopener\">RTMP</a> 模块）：</path></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure ... --add-module=/usr/build/nginx-rtmp-module</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态链接模块\" class=\"heading-control\"><a href=\"#动态链接模块\" class=\"headerlink\" title=\"动态链接模块\"></a>动态链接模块<a class=\"heading-anchor\" href=\"#动态链接模块\" aria-hidden=\"true\"></a></h3><p>NGINX 模块也可以编译为共享对象（* .so 文件），然后在运行时动态加载到 NGINX 中。这提供了更大的灵活性，因为在 NGINX 配置文件中可以随时添加或删除相关的 <code>load_module</code> 指令并重新加载配置来随时加载或卸载模块。请注意，模块本身必须支持动态链接。</p>\n<p>要使用动态加载的第三方模块编译 NGINX，请在 configure 命令中包含 <code>--add-dynamic-module=&lt;PATH&gt;</code> 选项，其中 <path> 是模块源码的路径：</path></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure ... --add-dynamic-module=&amp;lt;PATH&amp;gt;</span><br></pre></td></tr></table></figure>\n\n<p>加载一个动态模块，请在 NGINX 安装完成后在配置文件中添加 load_module 指令：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">load_module</span> <span class=\"string\">modules/ngx_mail_module.so;</span></span><br></pre></td></tr></table></figure>\n\n<p>有关更多信息，请参阅 NGINX 博客上的 <a href=\"https://www.nginx.com/blog/compiling-dynamic-modules-nginx-plus/\" target=\"_blank\" rel=\"noopener\">Compiling Third‑Party Dynamic Modules for NGINX and NGINX Plus</a> 以及 NGINX Wiki 中的 <a href=\"https://nginx.com/resources/wiki/extending/\" target=\"_blank\" rel=\"noopener\">Extending NGINX</a> 这两篇文章。</p>\n<h1 id=\"完成编译安装\" class=\"heading-control\"><a href=\"#完成编译安装\" class=\"headerlink\" title=\"完成编译安装\"></a>完成编译安装<a class=\"heading-anchor\" href=\"#完成编译安装\" aria-hidden=\"true\"></a></h1><ul>\n<li>编译安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装完成后，验证并启动 NGINX。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n","categories":["Nginx"],"tags":["Nginx"]},{"title":"阻止针对 NGINX 的恶意访问","url":"/post/block-malicious-access-to-nginx.html","content":"<p>为了对付爬虫以及各种攻击，起初我选择自己编写 Bash 脚本定时监控 Nginx 日志。<br>问题是对 Nginx 不管不顾可能导致恶意访问在被封禁之前已经得逞。<br>另外写正则并不是一个愉快的过程，我的目的是识别出恶意访问，然后阻止这些请求并封禁 IP。<br>经过一段时间的摸索，关键词就是 <a href=\"https://httpstatuses.com/444\" target=\"_blank\" rel=\"noopener\">444</a> 以及 <a href=\"https://www.fail2ban.org/\" target=\"_blank\" rel=\"noopener\">Fail2ban</a>。<a id=\"more\"></a></p>\n<h1 id=\"环境需求\" class=\"heading-control\"><a href=\"#环境需求\" class=\"headerlink\" title=\"环境需求\"></a>环境需求<a class=\"heading-anchor\" href=\"#环境需求\" aria-hidden=\"true\"></a></h1><ul>\n<li><a href=\"https://nginx.org/\" target=\"_blank\" rel=\"noopener\">Nginx</a> - 需要自己 <a href=\"https://1v9.im/post/compiling-and-installing-nginx.html\">编译</a>。</li>\n<li><a href=\"https://github.com/nbs-system/naxsi\" target=\"_blank\" rel=\"noopener\">Naxsi</a> - 开源的 Nginx WAF，与 Nginx 一起 <a href=\"https://github.com/nbs-system/naxsi/wiki/naxsi-compile\" target=\"_blank\" rel=\"noopener\">编译</a>。</li>\n<li><a href=\"https://github.com/leev/ngx_http_geoip2_module\" target=\"_blank\" rel=\"noopener\">Nginx GeoIP2 module</a> - 请认准这是 GeoIP2，使 Nginx 识别 IP 所在的国家和城市，同样与 Nginx 一起 <a href=\"https://github.com/leev/ngx_http_geoip2_module#installing\" target=\"_blank\" rel=\"noopener\">编译</a>。</li>\n</ul>\n<h1 id=\"背景知识\" class=\"heading-control\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识<a class=\"heading-anchor\" href=\"#背景知识\" aria-hidden=\"true\"></a></h1><h2 id=\"请求日志\" class=\"heading-control\"><a href=\"#请求日志\" class=\"headerlink\" title=\"请求日志\"></a><a href=\"https://nginx.org/en/docs/http/ngx_http_log_module.html#access_log\" target=\"_blank\" rel=\"noopener\">请求日志</a><a class=\"heading-anchor\" href=\"#请求日志\" aria-hidden=\"true\"></a></h2><p>首先启动人眼观察，从 Nginx 的 access_log 中摘取一次典型的恶意访问。</p>\n<blockquote>\n<p>因为我已经完成了本文的工作，所以它的响应是 444，一般来说是 404。</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">118.42</span><span class=\"string\">.xxx.xx</span> <span class=\"bullet\">-</span> <span class=\"bullet\">-</span> <span class=\"string\">[02/Feb/2019:08:23:40</span> <span class=\"string\">+0800]</span> <span class=\"string\">\"GET /phpMyAdmion/index.php HTTP/1.1\"</span> <span class=\"number\">444</span> <span class=\"number\">0</span> <span class=\"string\">\"-\"</span> <span class=\"string\">\"Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"</span></span><br></pre></td></tr></table></figure>\n\n<p>每一行的格式都是这样的（没有自定义 <a href=\"https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\" target=\"_blank\" rel=\"noopener\">log_format</a> 的话）。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$remote_addr</span> <span class=\"bullet\">-</span> <span class=\"bullet\">-</span> <span class=\"string\">[$time_local]</span> <span class=\"string\">\"$request\"</span> <span class=\"string\">$status</span> <span class=\"string\">$body_bytes_sent</span> <span class=\"string\">\"$http_referer\"</span> <span class=\"string\">\"$http_user_agent\"</span></span><br></pre></td></tr></table></figure>\n\n<p>显然我们可以给 $remote_addr、$request、$http_referer、$http_user_agent 加上一层判定再做出设置好的响应，翻译过来就是根据远程 IP、请求、请求来源、用户代理做出相同（一网打尽）或不同（个性化）的处理。</p>\n<p>我的方案是一网打尽，通过一系列的配置，最终表现为 access_log 中的恶意访问的响应为统一的 444，然后使用 Fail2ban 监控请求日志实现 IP 封禁。</p>\n<h2 id=\"错误日志\" class=\"heading-control\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a><a href=\"https://nginx.org/en/docs/ngx_core_module.html#error_log\" target=\"_blank\" rel=\"noopener\">错误日志</a><a class=\"heading-anchor\" href=\"#错误日志\" aria-hidden=\"true\"></a></h2><p>这里真正涉及的是 <a href=\"https://github.com/nbs-system/naxsi/wiki/naxsilogs\" target=\"_blank\" rel=\"noopener\">naxsilogs</a> 也就是 Naxsi 日志，naxsilogs 写入至 Nginx 的 error_log。</p>\n<p>我将 Naxsi 规则触发后的响应同样设置为 444，此时这一类请求并不会写入 Nginx 的 access_log 而只会写入 error_log，大概过程如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">恶意访问触发</span> <span class=\"string\">Naxsi</span> <span class=\"bullet\">------&gt;</span> <span class=\"number\">444</span> <span class=\"string\">响应</span> <span class=\"bullet\">------&gt;</span> <span class=\"string\">写入</span> <span class=\"string\">error.log</span></span><br></pre></td></tr></table></figure>\n\n<p>参考上文，同样配合 Fail2ban 使用，只不过这一次监控的日志并不一样。</p>\n<h2 id=\"模块与指令\" class=\"heading-control\"><a href=\"#模块与指令\" class=\"headerlink\" title=\"模块与指令\"></a>模块与指令<a class=\"heading-anchor\" href=\"#模块与指令\" aria-hidden=\"true\"></a></h2><ul>\n<li><a href=\"https://nginx.org/en/docs/http/ngx_http_map_module.html\" target=\"_blank\" rel=\"noopener\">map</a> - 涉及最多的模块，大多判定基于 map 指令。</li>\n<li><a href=\"https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return\" target=\"_blank\" rel=\"noopener\">return</a> - 针对我们所定义的恶意访问返回设定的响应。</li>\n<li><a href=\"https://nginx.org/en/docs/ngx_core_module.html#include\" target=\"_blank\" rel=\"noopener\">include</a> - 用来分离并引用多个配置，方便维护。</li>\n</ul>\n<h2 id=\"Fail2ban\" class=\"heading-control\"><a href=\"#Fail2ban\" class=\"headerlink\" title=\"Fail2ban\"></a>Fail2ban<a class=\"heading-anchor\" href=\"#Fail2ban\" aria-hidden=\"true\"></a></h2><p>我对 Fail2ban 没什么深入体验但不妨碍使用，基本上能遇到的问题都可以搜索到答案。<br>之前对 Fail2ban 的印象停留在 SSH 防爆破，特别是我使用 <a href=\"https://www.sshguard.net/\" target=\"_blank\" rel=\"noopener\">sshguard</a> 以后就更加没接触过它。<br>Fail2ban 可以监控各式各样的日志，依据你设定的规则控制 iptables 实现 IP 封禁。<br>安装过后更是有很多配置可以选用，涵盖 Apache、Nginx、HAProxy 等等。<br>就本文来说，新增两个 jail 以及 filter 就足够了。</p>\n<h1 id=\"Nginx-设置\" class=\"heading-control\"><a href=\"#Nginx-设置\" class=\"headerlink\" title=\"Nginx 设置\"></a>Nginx 设置<a class=\"heading-anchor\" href=\"#Nginx-设置\" aria-hidden=\"true\"></a></h1><h2 id=\"主配置\" class=\"heading-control\"><a href=\"#主配置\" class=\"headerlink\" title=\"主配置\"></a>主配置<a class=\"heading-anchor\" href=\"#主配置\" aria-hidden=\"true\"></a></h2><p>nginx.conf</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">http</span></span><br><span class=\"line\">\t<span class=\"string\">&#123;</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 恶意请求一律返回 444 状态码</span></span><br><span class=\"line\">            <span class=\"comment\"># 后续配合 Fail2ban 实现 IP 封禁</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 用户代理规则，针对 User-Agent</span></span><br><span class=\"line\">\t    <span class=\"string\">include</span> <span class=\"string\">UA.rules;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"comment\"># 国别规则，针对国家</span></span><br><span class=\"line\">\t    <span class=\"string\">include</span> <span class=\"string\">GeoIP2.rules;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"comment\"># 额外规则，两个简单的 if 判断</span></span><br><span class=\"line\">            <span class=\"string\">include</span> <span class=\"string\">extra.rules;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># Naxsi 核心规则</span></span><br><span class=\"line\">\t    <span class=\"string\">include</span> <span class=\"string\">naxsi_core.rules;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 默认主机/空主机</span></span><br><span class=\"line\">            <span class=\"string\">server</span></span><br><span class=\"line\">                <span class=\"string\">&#123;</span></span><br><span class=\"line\">                    <span class=\"string\">listen</span> <span class=\"number\">80</span> <span class=\"string\">default_server;</span></span><br><span class=\"line\">                    <span class=\"string\">server_name</span> <span class=\"string\">_;</span></span><br><span class=\"line\">                    <span class=\"string\">return</span> <span class=\"number\">444</span><span class=\"string\">;</span></span><br><span class=\"line\">                <span class=\"string\">&#125;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"comment\"># 引入站点配置</span></span><br><span class=\"line\">            <span class=\"string\">include</span> <span class=\"string\">vhost/*.conf;</span></span><br><span class=\"line\">        <span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户代理规则\" class=\"heading-control\"><a href=\"#用户代理规则\" class=\"headerlink\" title=\"用户代理规则\"></a>用户代理规则<a class=\"heading-anchor\" href=\"#用户代理规则\" aria-hidden=\"true\"></a></h2><p>UA.rules</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">map</span> <span class=\"string\">$http_user_agent</span> <span class=\"string\">$UA_Policy</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 默认设为 0，可以设为任意字符</span></span><br><span class=\"line\">    <span class=\"string\">default</span> <span class=\"number\">0</span><span class=\"string\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 正则匹配（不区分大小写）User-Agent</span></span><br><span class=\"line\">    <span class=\"comment\"># 这些仅仅是我个人判定的恶意 UA，不具有任何说服力</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为它们大多锲而不舍实在烦人，比如 masscan 就是个知名的扫描工具</span></span><br><span class=\"line\">    <span class=\"string\">~*(?i)(.Net|ipip|masscan|ZeMu|Morfeus|Netcraft|zgrab|Solstice|Python)</span> <span class=\"number\">1</span><span class=\"string\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 匹配空白 UA</span></span><br><span class=\"line\">    <span class=\"string\">\"\"</span> <span class=\"number\">1</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"国别规则\" class=\"heading-control\"><a href=\"#国别规则\" class=\"headerlink\" title=\"国别规则\"></a>国别规则<a class=\"heading-anchor\" href=\"#国别规则\" aria-hidden=\"true\"></a></h2><p>GeoIP2.rules | GeoIP2 采用 <a href=\"https://zh.wikipedia.org/wiki/ISO_3166-2\" target=\"_blank\" rel=\"noopener\">ISO 3166-2</a> 代码</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 匹配国家，请调整为自己想要的配置或者干脆忽略</span></span><br><span class=\"line\"><span class=\"string\">map</span> <span class=\"string\">$geoip2_data_country_code</span> <span class=\"string\">$Country_Policy</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"string\">default</span> <span class=\"number\">0</span><span class=\"string\">;</span></span><br><span class=\"line\">    <span class=\"string\">BY</span> <span class=\"number\">1</span><span class=\"string\">;</span></span><br><span class=\"line\">    <span class=\"string\">RU</span> <span class=\"number\">1</span><span class=\"string\">;</span></span><br><span class=\"line\">    <span class=\"string\">KR</span> <span class=\"number\">1</span><span class=\"string\">;</span></span><br><span class=\"line\">    <span class=\"string\">IR</span> <span class=\"number\">1</span><span class=\"string\">;</span></span><br><span class=\"line\">    <span class=\"string\">SG</span> <span class=\"number\">1</span><span class=\"string\">;</span></span><br><span class=\"line\">   <span class=\"comment\">#CN 1;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此处往下段落修改自 https://github.com/leev/ngx_http_geoip2_module#example-usage</span></span><br><span class=\"line\"><span class=\"comment\"># 请注意你的文件路径，这是我的配置，这几段也可以直接写进 http 段落</span></span><br><span class=\"line\"><span class=\"string\">geoip2</span> <span class=\"string\">conf/GeoLite2-City.mmdb</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"string\">$geoip2_data_city_name</span> <span class=\"string\">default=Shanghai</span> <span class=\"string\">city</span> <span class=\"string\">names</span> <span class=\"string\">zh-CN;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">geoip2</span> <span class=\"string\">conf/GeoLite2-Country.mmdb</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"string\">auto_reload</span> <span class=\"number\">5</span><span class=\"string\">m;</span></span><br><span class=\"line\">    <span class=\"string\">$geoip2_metadata_country_build</span> <span class=\"string\">metadata</span> <span class=\"string\">build_epoch;</span></span><br><span class=\"line\">    <span class=\"comment\">#$geoip2_data_country_code default=CN source=$variable_with_ip country iso_code;</span></span><br><span class=\"line\">    <span class=\"string\">$geoip2_data_country_code</span> <span class=\"string\">default=CN</span> <span class=\"string\">country</span> <span class=\"string\">iso_code;</span></span><br><span class=\"line\">    <span class=\"string\">$geoip2_data_country_name</span> <span class=\"string\">country</span> <span class=\"string\">names</span> <span class=\"string\">zh-CN;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">fastcgi_param</span> <span class=\"string\">COUNTRY_CODE</span> <span class=\"string\">$geoip2_data_country_code;</span></span><br><span class=\"line\"><span class=\"string\">fastcgi_param</span> <span class=\"string\">COUNTRY_NAME</span> <span class=\"string\">$geoip2_data_country_name;</span></span><br><span class=\"line\"><span class=\"string\">fastcgi_param</span> <span class=\"string\">CITY_NAME</span>    <span class=\"string\">$geoip2_data_city_name;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"额外规则\" class=\"heading-control\"><a href=\"#额外规则\" class=\"headerlink\" title=\"额外规则\"></a>额外规则<a class=\"heading-anchor\" href=\"#额外规则\" aria-hidden=\"true\"></a></h2><p>extra.rules</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 非 GET HEAD POST 请求一律 444</span></span><br><span class=\"line\"><span class=\"string\">if</span> <span class=\"string\">($request_method</span> <span class=\"string\">!~</span> <span class=\"string\">^(GET|HEAD|POST)$</span> <span class=\"string\">)</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">return</span> <span class=\"number\">444</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 非许可 host 一律 444</span></span><br><span class=\"line\"><span class=\"comment\"># 一般来说你对外开放的站点都可以放进去</span></span><br><span class=\"line\"><span class=\"string\">if</span> <span class=\"string\">($host</span> <span class=\"string\">!~*</span> <span class=\"string\">^(aaa.com|b.aaa.com|c.ddd.com)$)</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">return</span> <span class=\"number\">444</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Naxsi-规则\" class=\"heading-control\"><a href=\"#Naxsi-规则\" class=\"headerlink\" title=\"Naxsi 规则\"></a>Naxsi 规则<a class=\"heading-anchor\" href=\"#Naxsi-规则\" aria-hidden=\"true\"></a></h2><p>naxsi.rules | 不同于 Naxsi 核心规则 | 参见 <a href=\"https://github.com/nbs-system/naxsi/wiki/naxsi-setup\" target=\"_blank\" rel=\"noopener\">官方说明</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">SecRulesEnabled;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此处对应下文站点配置中的 Naxsi 响应</span></span><br><span class=\"line\"><span class=\"string\">DeniedUrl</span> <span class=\"string\">\"/RequestDenied\"</span><span class=\"string\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">CheckRule</span> <span class=\"string\">\"$SQL &gt;= 8\"</span> <span class=\"string\">BLOCK;</span></span><br><span class=\"line\"><span class=\"string\">CheckRule</span> <span class=\"string\">\"$RFI &gt;= 8\"</span> <span class=\"string\">BLOCK;</span></span><br><span class=\"line\"><span class=\"string\">CheckRule</span> <span class=\"string\">\"$TRAVERSAL &gt;= 4\"</span> <span class=\"string\">BLOCK;</span></span><br><span class=\"line\"><span class=\"string\">CheckRule</span> <span class=\"string\">\"$EVADE &gt;= 4\"</span> <span class=\"string\">BLOCK;</span></span><br><span class=\"line\"><span class=\"string\">CheckRule</span> <span class=\"string\">\"$XSS &gt;= 8\"</span> <span class=\"string\">BLOCK;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"站点配置\" class=\"heading-control\"><a href=\"#站点配置\" class=\"headerlink\" title=\"站点配置\"></a>站点配置<a class=\"heading-anchor\" href=\"#站点配置\" aria-hidden=\"true\"></a></h2><p>vhost/*.conf</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 无关配置不再赘述</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"comment\"># 80 转 443</span></span><br><span class=\"line\">        <span class=\"string\">listen</span> <span class=\"number\">80</span><span class=\"string\">;</span></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"number\">301</span> <span class=\"attr\">https://$server_name$request_uri;</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"string\">listen</span> <span class=\"number\">443</span> <span class=\"string\">ssl</span> <span class=\"string\">http2;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 额外响应</span></span><br><span class=\"line\">\t<span class=\"string\">include</span> <span class=\"string\">extra.rules;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\"># Naxsi 响应</span></span><br><span class=\"line\">        <span class=\"string\">location</span> <span class=\"string\">/RequestDenied</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">            <span class=\"string\">return</span> <span class=\"number\">444</span><span class=\"string\">;</span></span><br><span class=\"line\">        <span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">location</span> <span class=\"string\">/</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">            <span class=\"comment\"># Naxsi 的具体规则，定义了响应转向 /RequestDenied</span></span><br><span class=\"line\">            <span class=\"string\">include</span> <span class=\"string\">naxsi.rules;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 国别响应</span></span><br><span class=\"line\">            <span class=\"string\">if</span> <span class=\"string\">($Country_Policy</span> <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"string\">)</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">                <span class=\"string\">return</span> <span class=\"number\">444</span><span class=\"string\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 你也可以基于 $Country_Policy 来一个八国语言的问候</span></span><br><span class=\"line\">                <span class=\"comment\">#add_header Content-Type \"text/plain;charset=utf-8\";</span></span><br><span class=\"line\">                <span class=\"comment\">#return 200 \"Your IP Has Been banned!\";</span></span><br><span class=\"line\">            <span class=\"string\">&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 用户代理响应</span></span><br><span class=\"line\">        <span class=\"string\">if</span> <span class=\"string\">($UA_Policy</span> <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"string\">)</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">            <span class=\"string\">return</span> <span class=\"number\">444</span><span class=\"string\">;</span></span><br><span class=\"line\">            <span class=\"comment\">#return http://127.0.0.1;</span></span><br><span class=\"line\">        <span class=\"string\">&#125;</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Fail2ban-设置\" class=\"heading-control\"><a href=\"#Fail2ban-设置\" class=\"headerlink\" title=\"Fail2ban 设置\"></a>Fail2ban 设置<a class=\"heading-anchor\" href=\"#Fail2ban-设置\" aria-hidden=\"true\"></a></h1><h2 id=\"警告\" class=\"heading-control\"><a href=\"#警告\" class=\"headerlink\" title=\"警告\"></a>警告<a class=\"heading-anchor\" href=\"#警告\" aria-hidden=\"true\"></a></h2><p><mark>重要的警告放前面，因为我已经完成了各种测试，自我感觉方案成熟所以将封禁设为 72 小时。<br>如果你要测试（你肯定得测试），请务必将 bantime 设为短时长比如 1m（一分钟），否则你的测试 IP 可能一键去世。</mark></p>\n<h2 id=\"监控-access-log\" class=\"heading-control\"><a href=\"#监控-access-log\" class=\"headerlink\" title=\"监控 access_log\"></a>监控 access_log<a class=\"heading-anchor\" href=\"#监控-access-log\" aria-hidden=\"true\"></a></h2><ul>\n<li>新增 444 监狱</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/fail2ban/jail.d/nginx-444.conf &lt;&lt; EOF</span><br><span class=\"line\">[nginx-444]</span><br><span class=\"line\">enabled  = <span class=\"literal\">true</span></span><br><span class=\"line\">port     = http,https</span><br><span class=\"line\">filter   = nginx-444</span><br><span class=\"line\">logpath  = /var/<span class=\"built_in\">log</span>/nginx/*access.log</span><br><span class=\"line\">maxretry = 1</span><br><span class=\"line\">findtime = 1m</span><br><span class=\"line\">bantime  = 72h</span><br><span class=\"line\">action   = iptables[name=nginx, port=<span class=\"string\">\"0:65535\"</span>, protocol=tcp]</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新增 444 匹配</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/fail2ban/filter.d/nginx-444.conf &lt;&lt; EOF</span><br><span class=\"line\">[Definition]</span><br><span class=\"line\"></span><br><span class=\"line\">failregex = ^&lt;HOST&gt; -.*444 0.*</span><br><span class=\"line\"></span><br><span class=\"line\">ignoreregex =</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"监控-error-log\" class=\"heading-control\"><a href=\"#监控-error-log\" class=\"headerlink\" title=\"监控 error_log\"></a>监控 error_log<a class=\"heading-anchor\" href=\"#监控-error-log\" aria-hidden=\"true\"></a></h2><ul>\n<li>新增 naxsi 监狱</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/fail2ban/jail.d/nginx-naxsi.conf &lt;&lt; EOF</span><br><span class=\"line\">[nginx-naxsi]</span><br><span class=\"line\">enabled = <span class=\"literal\">true</span></span><br><span class=\"line\">port = http,https</span><br><span class=\"line\">filter = nginx-naxsi</span><br><span class=\"line\">logpath = /var/<span class=\"built_in\">log</span>/nginx/*error.log</span><br><span class=\"line\">maxretry = 6</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新增 naxsi 匹配</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/fail2ban/filter.d/nginx-naxsi.conf &lt;&lt; EOF</span><br><span class=\"line\">[Definition]</span><br><span class=\"line\"></span><br><span class=\"line\">failregex = NAXSI_FMT: ip=&lt;HOST&gt;.*&amp;config=block</span><br><span class=\"line\"></span><br><span class=\"line\">ignoreregex = NAXSI_FMT: ip=&lt;HOST&gt;.*&amp;config=learning</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重启-验证-Fail2ban\" class=\"heading-control\"><a href=\"#重启-验证-Fail2ban\" class=\"headerlink\" title=\"重启/验证 Fail2ban\"></a>重启/验证 Fail2ban<a class=\"heading-anchor\" href=\"#重启-验证-Fail2ban\" aria-hidden=\"true\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">fail2ban-client --<span class=\"built_in\">test</span></span><br><span class=\"line\">service fail2ban restart</span><br><span class=\"line\">fail2ban-client ping</span><br><span class=\"line\">fail2ban-client status</span><br><span class=\"line\">iptables -L | grep nginx</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\" class=\"heading-control\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试<a class=\"heading-anchor\" href=\"#测试\" aria-hidden=\"true\"></a></h1><p>假设你按部就班地布置好一切，可以通过 curl 触发封禁。<br>再次警告，请务必将 bantime 设置为短时长比如 1m。<br>另外，在确认测试结果良好后，你可能需要删除 <strong>Fail2ban 数据库</strong>并复原 bantime 设置最后再次重启 Fail2ban。</p>\n<h2 id=\"本地操作\" class=\"heading-control\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作<a class=\"heading-anchor\" href=\"#本地操作\" aria-hidden=\"true\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 正常访问你的网站，Nginx 正常响应</span></span><br><span class=\"line\"><span class=\"comment\"># 或者直接浏览器访问，都不会触发 444</span></span><br><span class=\"line\">curl https://你的网站</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以空白 UA 访问，立刻触发 Nginx 用户代理响应</span></span><br><span class=\"line\"><span class=\"comment\"># Nginx 返回 444，Fail2ban 捕获到日志</span></span><br><span class=\"line\"><span class=\"comment\"># 此刻开始你的测试 IP 将会被封禁 1 分钟</span></span><br><span class=\"line\">curl -A <span class=\"string\">\"\"</span> https://你的网站</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浏览器访问或者刷新你的网站，打不开就对了</span></span><br><span class=\"line\"><span class=\"comment\"># 一分钟过后 IP 解封</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程操作\" class=\"heading-control\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作<a class=\"heading-anchor\" href=\"#远程操作\" aria-hidden=\"true\"></a></h2><ul>\n<li>验证</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ tail -f /var/<span class=\"built_in\">log</span>/fail2ban.log</span><br><span class=\"line\">2019-02-10 00:59:13,689 fail2ban.actions        [17110]: NOTICE  [nginx-444] Ban 222.93.xxx.xx</span><br><span class=\"line\">2019-02-10 01:00:13,786 fail2ban.actions        [17110]: NOTICE  [nginx-444] Unban 222.93.xxx.xx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>恢复</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service fail2ban stop</span><br><span class=\"line\">rm -rf /var/lib/fail2ban/fail2ban.sqlite3</span><br><span class=\"line\">service fail2ban start</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\" class=\"heading-control\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结<a class=\"heading-anchor\" href=\"#小结\" aria-hidden=\"true\"></a></h1><ul>\n<li>Nginx 本身支持 deny IP，我没有采用这种方式。</li>\n<li>Fail2ban 单独使用也可以封禁恶意访问，它的本质就是读取日志然后进行防火墙操作。</li>\n<li>iptables 也不是唯一选择，还支持 nftables、firewalld 等等。</li>\n<li>限流方面的配置暂时没有涉及，以后有机会再行补充。</li>\n</ul>\n<h1 id=\"参考资料\" class=\"heading-control\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料<a class=\"heading-anchor\" href=\"#参考资料\" aria-hidden=\"true\"></a></h1><ul>\n<li><a href=\"https://github.com/mariusv/nginx-badbot-blocker\" target=\"_blank\" rel=\"noopener\">Nginx Bad Bot Blocker</a></li>\n<li><a href=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker\" target=\"_blank\" rel=\"noopener\">Nginx Ultimate Bad Bot Blocker</a></li>\n<li><a href=\"https://www.fail2ban.org/wiki/index.php/Commands\" target=\"_blank\" rel=\"noopener\">Commands - Fail2ban</a></li>\n<li><a href=\"https://github.com/nbs-system/naxsi/wiki/integration-fail2ban\" target=\"_blank\" rel=\"noopener\">ntegration fail2ban</a></li>\n<li><a href=\"https://www.linode.com/docs/security/using-fail2ban-for-security/\" target=\"_blank\" rel=\"noopener\">Use Fail2ban to Secure Your Server</a></li>\n<li><a href=\"https://easyengine.io/tutorials/nginx/log-parsing\" target=\"_blank\" rel=\"noopener\">Parsing access.log and error.logs using linux commands</a></li>\n</ul>\n","categories":["Nginx"],"tags":["Nginx","444","Fail2ban"]},{"title":"使用 Gulp 精简 Hexo","url":"/post/use-gulp-to-minify-hexo.html","content":"<div class=\"note danger\">\n            <p>精简可能导致本地预览与最终发布的版本有所差异甚至产生 BUG，所以开启个别选项需要慎重。</p>\n          </div>\n\n<blockquote>\n<p>为了更好地应对 ES6 语法，本博客已弃用 Babel 与 Uglify。</p>\n</blockquote>\n<p><a href=\"https://gulpjs.com/\" target=\"_blank\" rel=\"noopener\">gulp</a> 是基于流的自动化构建工具，使用 gulp 以及 gulp 插件我们可以达成很多目的，比如精简 Hexo 项目。<a id=\"more\"></a></p>\n<h1 id=\"安装依赖\" class=\"heading-control\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖<a class=\"heading-anchor\" href=\"#安装依赖\" aria-hidden=\"true\"></a></h1><h2 id=\"gulp-本体\" class=\"heading-control\"><a href=\"#gulp-本体\" class=\"headerlink\" title=\"gulp 本体\"></a>gulp 本体<a class=\"heading-anchor\" href=\"#gulp-本体\" aria-hidden=\"true\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">npm i gulp -g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gulp-插件\" class=\"heading-control\"><a href=\"#gulp-插件\" class=\"headerlink\" title=\"gulp 插件\"></a>gulp 插件<a class=\"heading-anchor\" href=\"#gulp-插件\" aria-hidden=\"true\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 Hexo 目录内运行命令安装</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 --save-dev，与 Hexo 当前的依赖区分开来</span></span><br><span class=\"line\">npm i --save-dev \\</span><br><span class=\"line\">gulp-terser\\</span><br><span class=\"line\">gulp-htmlmin \\</span><br><span class=\"line\">gulp-imagemin \\</span><br><span class=\"line\">gulp-clean-css \\</span><br><span class=\"line\">gulp-minify-inline</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"搭建任务\" class=\"heading-control\"><a href=\"#搭建任务\" class=\"headerlink\" title=\"搭建任务\"></a>搭建任务<a class=\"heading-anchor\" href=\"#搭建任务\" aria-hidden=\"true\"></a></h1><blockquote>\n<p>gulp 任务流程通过 <a href=\"https://gulpjs.com/docs/en/getting-started/javascript-and-gulpfiles#gulpfile-explained\" target=\"_blank\" rel=\"noopener\">gulpfile.js</a> 文件控制。</p>\n</blockquote>\n<p>首先在 Hexo 项目内创建 gulpfile.js 文件，<mark>仅供参考</mark>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const gulp = require(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\">const terser = require(<span class=\"string\">'gulp-terser'</span>);</span><br><span class=\"line\">const htmlmin = require(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\">const imagemin = require(<span class=\"string\">'gulp-imagemin'</span>);</span><br><span class=\"line\">const cleanCSS = require(<span class=\"string\">'gulp-clean-css'</span>);</span><br><span class=\"line\">const minifyInline = require(<span class=\"string\">'gulp-minify-inline'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-html'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> gulp.src(<span class=\"string\">'./public/**/*.html'</span>)</span><br><span class=\"line\">  .pipe(htmlmin(&#123;</span><br><span class=\"line\">    minifyURLs: <span class=\"literal\">true</span>, // Minify URLs <span class=\"keyword\">in</span> various attributes (uses relateurl)</span><br><span class=\"line\">    useShortDoctype: <span class=\"literal\">true</span>, // Replaces the doctype with the short (HTML5) doctype</span><br><span class=\"line\">    collapseWhitespace: <span class=\"literal\">true</span>, // Collapse white space that contributes to text nodes <span class=\"keyword\">in</span> a document tree</span><br><span class=\"line\">    conservativeCollapse: <span class=\"literal\">true</span>, // Always collapse to 1 space (never remove it entirely). Must be used <span class=\"keyword\">in</span> conjunction with collapseWhitespace=<span class=\"literal\">true</span></span><br><span class=\"line\">    collapseInlineTagWhitespace: <span class=\"literal\">true</span>, // Don<span class=\"string\">'t leave any spaces between display:inline; elements when collapsing. Must be used in conjunction with collapseWhitespace=true</span></span><br><span class=\"line\"><span class=\"string\">    collapseBooleanAttributes: true, // Omit attribute values from boolean attributes</span></span><br><span class=\"line\"><span class=\"string\">    removeComments: true, // Strip HTML comments</span></span><br><span class=\"line\"><span class=\"string\">    removeEmptyAttributes: true, // Remove all attributes with whitespace-only values</span></span><br><span class=\"line\"><span class=\"string\">    removeScriptTypeAttributes: true, // Remove type=\"text/javascript\" from script tags. Other type attribute values are left intact</span></span><br><span class=\"line\"><span class=\"string\">    removeStyleLinkTypeAttributes: true // Remove type=\"text/css\" from style and link tags. Other type attribute values are left intact</span></span><br><span class=\"line\"><span class=\"string\">  &#125;))</span></span><br><span class=\"line\"><span class=\"string\">  .pipe(minifyInline())</span></span><br><span class=\"line\"><span class=\"string\">  .pipe(gulp.dest('</span>./public<span class=\"string\">'));</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">gulp.task('</span>minify-css<span class=\"string\">', () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return gulp.src('</span>./public/**/*.css<span class=\"string\">', '</span>!./public/**/*.min.css<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">  .pipe(cleanCSS(&#123;debug: true&#125;, details =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    console.log(`$&#123;details.name&#125;: $&#123;details.stats.originalSize&#125;`);</span></span><br><span class=\"line\"><span class=\"string\">    console.log(`$&#123;details.name&#125;: $&#123;details.stats.minifiedSize&#125;`);</span></span><br><span class=\"line\"><span class=\"string\">  &#125;))</span></span><br><span class=\"line\"><span class=\"string\">  .pipe(gulp.dest('</span>./public<span class=\"string\">'));</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">gulp.task('</span>minify-js<span class=\"string\">', () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return gulp.src([</span></span><br><span class=\"line\"><span class=\"string\">    '</span>./public/**/*.js<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    '</span>!./public/**/*.min.js<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    '</span>!./public/**/*.umd.js<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">  ])</span></span><br><span class=\"line\"><span class=\"string\">  .pipe(terser(&#123;</span></span><br><span class=\"line\"><span class=\"string\">    keep_fnames: true,</span></span><br><span class=\"line\"><span class=\"string\">    mangle: false</span></span><br><span class=\"line\"><span class=\"string\">  &#125;))</span></span><br><span class=\"line\"><span class=\"string\">  .pipe(gulp.dest('</span>./public<span class=\"string\">'));</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">gulp.task('</span>minify-img<span class=\"string\">', () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return gulp.src('</span>./public/image/**/*.*<span class=\"string\">', '</span>./public/image/**/*.webp<span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">  .pipe(imagemin([</span></span><br><span class=\"line\"><span class=\"string\">    imagemin.gifsicle(&#123;interlaced: true&#125;),</span></span><br><span class=\"line\"><span class=\"string\">    imagemin.jpegtran(&#123;progressive: true&#125;),</span></span><br><span class=\"line\"><span class=\"string\">    imagemin.optipng(&#123;optimizationLevel: 7&#125;),</span></span><br><span class=\"line\"><span class=\"string\">    imagemin.svgo(&#123;</span></span><br><span class=\"line\"><span class=\"string\">      plugins: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;removeViewBox: true&#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;cleanupIDs: false&#125;</span></span><br><span class=\"line\"><span class=\"string\">      ]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;)</span></span><br><span class=\"line\"><span class=\"string\">  ]))</span></span><br><span class=\"line\"><span class=\"string\">  .pipe(gulp.dest('</span>./public/image<span class=\"string\">'))</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">gulp.task(</span></span><br><span class=\"line\"><span class=\"string\">  '</span>default<span class=\"string\">', </span></span><br><span class=\"line\"><span class=\"string\">  gulp.series(</span></span><br><span class=\"line\"><span class=\"string\">    '</span>minify-html<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    '</span>minify-css<span class=\"string\">',</span></span><br><span class=\"line\"><span class=\"string\">    '</span>minify-js<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    '</span>minify-img<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">  )</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"运行任务\" class=\"heading-control\"><a href=\"#运行任务\" class=\"headerlink\" title=\"运行任务\"></a>运行任务<a class=\"heading-anchor\" href=\"#运行任务\" aria-hidden=\"true\"></a></h1><p>之前全局安装了 Gulp，在 Hexo 项目内执行命令还需要运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm link gulp</span><br></pre></td></tr></table></figure>\n\n<p>Gulp 精简的内容是 public 目录下的内容，所以还需要执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo cl &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>\n\n<p>最后运行 Gulp 任务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gulp</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"任务结果\" class=\"heading-control\"><a href=\"#任务结果\" class=\"headerlink\" title=\"任务结果\"></a>任务结果<a class=\"heading-anchor\" href=\"#任务结果\" aria-hidden=\"true\"></a></h1><p>甩张图吧，任务成功运行大概就是这样子，具体结果自行比对即可。</p>\n<p><img alt data-src=\"https://i.loli.net/2019/02/22/5c6eceff13254.gif\"></p>\n<h1 id=\"参考资料\" class=\"heading-control\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料<a class=\"heading-anchor\" href=\"#参考资料\" aria-hidden=\"true\"></a></h1><ul>\n<li><a href=\"https://github.com/duan602728596/gulp-terser\" target=\"_blank\" rel=\"noopener\">gulp-terser</a></li>\n<li><a href=\"https://github.com/jonschlinkert/gulp-htmlmin\" target=\"_blank\" rel=\"noopener\">gulp-htmlmin</a></li>\n<li><a href=\"https://github.com/sindresorhus/gulp-imagemin\" target=\"_blank\" rel=\"noopener\">gulp-imagemin</a></li>\n<li><a href=\"https://github.com/scniro/gulp-clean-css\" target=\"_blank\" rel=\"noopener\">gulp-clean-css</a></li>\n<li><a href=\"https://github.com/shkuznetsov/gulp-minify-inline\" target=\"_blank\" rel=\"noopener\">gulp-minify-inline</a></li>\n</ul>\n","categories":["Hexo"],"tags":["Hexo","Gulp"]},{"title":"备份文件至 Github 私有仓库","url":"/post/backup-files-to-github-private-repo.html","content":"<p><a href=\"https://github.blog/2019-01-07-new-year-new-github/\" target=\"_blank\" rel=\"noopener\">喜大普奔</a>，GitHub Free 可以使用无限的私有仓库。<br>本文将介绍通过命令行创建远程私有仓库并将本地文件推送至远程仓库的过程。<a id=\"more\"></a></p>\n<h1 id=\"SSH-key\" class=\"heading-control\"><a href=\"#SSH-key\" class=\"headerlink\" title=\"SSH key\"></a>SSH key<a class=\"heading-anchor\" href=\"#SSH-key\" aria-hidden=\"true\"></a></h1><h2 id=\"生成密钥\" class=\"heading-control\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥<a class=\"heading-anchor\" href=\"#生成密钥\" aria-hidden=\"true\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">EMAIL=填入你的 Github 邮箱</span><br><span class=\"line\">ssh-keygen -t ed25519 -C <span class=\"string\">\"<span class=\"variable\">$EMAIL</span>\"</span></span><br><span class=\"line\"><span class=\"comment\"># 口令是否设置请自行选择，我一路回车全部留空了</span></span><br><span class=\"line\"><span class=\"comment\"># 默认生成 ~/.ssh/id_ed25519.pub</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加到-Github\" class=\"heading-control\"><a href=\"#添加到-Github\" class=\"headerlink\" title=\"添加到 Github\"></a>添加到 Github<a class=\"heading-anchor\" href=\"#添加到-Github\" aria-hidden=\"true\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_ed25519.pub</span><br><span class=\"line\"><span class=\"comment\"># 复制内容下一步备用</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此处也可以通过命令行操作，感兴趣的可以自行研究 Github API 文档，网页操作的话更加直观一点。</p>\n</blockquote>\n<p>访问 <a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">SSH and GPG keys</a>，点击 New SSH key，黏贴上一步复制的内容，标题可以省略。</p>\n<h2 id=\"验证密钥\" class=\"heading-control\"><a href=\"#验证密钥\" class=\"headerlink\" title=\"验证密钥\"></a>验证密钥<a class=\"heading-anchor\" href=\"#验证密钥\" aria-hidden=\"true\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> $(ssh-agent -s)</span><br><span class=\"line\">ssh-add ~/.ssh/id_ed25519</span><br><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Access-token\" class=\"heading-control\"><a href=\"#Access-token\" class=\"headerlink\" title=\"Access token\"></a>Access token<a class=\"heading-anchor\" href=\"#Access-token\" aria-hidden=\"true\"></a></h1><p>访问 <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener\">Personal Access Tokens</a> 点击 Generate new token 按钮。<br>授予 repo 操作相关权限，务必手动且安全地保存 token，因为只显示一次。<br>轻度用户完全可以用一次 token 删一次，这样也更加安全。</p>\n<h1 id=\"创建远程私有仓库\" class=\"heading-control\"><a href=\"#创建远程私有仓库\" class=\"headerlink\" title=\"创建远程私有仓库\"></a>创建远程私有仓库<a class=\"heading-anchor\" href=\"#创建远程私有仓库\" aria-hidden=\"true\"></a></h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">user_name=填入你的 Github 用户名</span><br><span class=\"line\">repo_name=填入你新建的仓库名，确保不要重复</span><br><span class=\"line\">github_token=填入你的 access token</span><br><span class=\"line\">curl -u <span class=\"string\">\"<span class=\"variable\">$user_name</span>:<span class=\"variable\">$github_token</span>\"</span> https://api.github.com/user/repos -d <span class=\"string\">'&#123;\"name\":\"'</span><span class=\"variable\">$repo_name</span><span class=\"string\">'\",\"private\":true&#125;'</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初始化并推送本地仓库\" class=\"heading-control\"><a href=\"#初始化并推送本地仓库\" class=\"headerlink\" title=\"初始化并推送本地仓库\"></a>初始化并推送本地仓库<a class=\"heading-anchor\" href=\"#初始化并推送本地仓库\" aria-hidden=\"true\"></a></h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">BACKUP=填入你想要备份的目录的绝对路径</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$BACKUP</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"# <span class=\"variable\">$repo_name</span>\"</span> &gt;&gt; README.md</span><br><span class=\"line\"><span class=\"comment\"># 排除不必要的文件，比如大文件、有风险的文件</span></span><br><span class=\"line\">vi .gitignore</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add -A</span><br><span class=\"line\"><span class=\"comment\"># 这里我设置提交记录为日期形式，毕竟目的是备份</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"`date --rfc-3339=seconds`\"</span></span><br><span class=\"line\">git remote add origin git@github.com:<span class=\"variable\">$user_name</span>/<span class=\"variable\">$repo_name</span>.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"关于安全性\" class=\"heading-control\"><a href=\"#关于安全性\" class=\"headerlink\" title=\"关于安全性\"></a>关于安全性<a class=\"heading-anchor\" href=\"#关于安全性\" aria-hidden=\"true\"></a></h1><ul>\n<li>不要推送任何可能泄露账户与个人隐私等危险信息的文件。</li>\n<li>妥善保管 ssh key 与 access token，如果遗失或者仅仅尝鲜，请自行通过 Github 网站取消它们的授权。</li>\n<li>正常来说，启用 Github 账户两步验证、多注意邮箱通知、不要在不熟悉的设备上操作，没有太大问题。</li>\n</ul>\n<h1 id=\"参考内容\" class=\"heading-control\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容<a class=\"heading-anchor\" href=\"#参考内容\" aria-hidden=\"true\"></a></h1><ul>\n<li><a href=\"https://curl.haxx.se/docs/manpage.html\" target=\"_blank\" rel=\"noopener\">curl - How To Use</a></li>\n<li><a href=\"https://developer.github.com/v3/repos/#create\" target=\"_blank\" rel=\"noopener\">Repositories | GitHub Developer Guide</a></li>\n<li><a href=\"https://help.github.com/cn/articles/connecting-to-github-with-ssh\" target=\"_blank\" rel=\"noopener\">使用 SSH 连接到 GitHub - Github 帮助</a></li>\n<li><a href=\"https://www.ssh.com/ssh/keygen/#sec-Choosing-an-Algorithm-and-Key-Size\" target=\"_blank\" rel=\"noopener\">How to use ssh-keygen to generate a new SSH key | SSH.COM</a></li>\n</ul>\n","categories":["Github"],"tags":["Github"]},{"title":"acme.sh 与 Letsencrypt","url":"/post/acme.sh-and-letsencrypt.html","content":"<p><a href=\"https://github.com/Neilpang/acme.sh\" target=\"_blank\" rel=\"noopener\">acme.sh</a> 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书。<br>我将分享我个人使用 acme.sh 的 DNS API 模式生成通配符证书并安装至 Nginx 的全过程。<a id=\"more\"></a></p>\n<h1 id=\"安装-acme-sh\" class=\"heading-control\"><a href=\"#安装-acme-sh\" class=\"headerlink\" title=\"安装 acme.sh\"></a>安装 acme.sh<a class=\"heading-anchor\" href=\"#安装-acme-sh\" aria-hidden=\"true\"></a></h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>\n\n<p>安装脚本会自动设置 alias 方便使用。<br>zsh 用户也许可能大概需要手动设置 alias。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接编辑 ~/.zshrc，或者其他方法</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> acme.sh=<span class=\"string\">'~/.acme.sh/acme.sh'</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"生成-letsencrypt-证书\" class=\"heading-control\"><a href=\"#生成-letsencrypt-证书\" class=\"headerlink\" title=\"生成 letsencrypt 证书\"></a>生成 letsencrypt 证书<a class=\"heading-anchor\" href=\"#生成-letsencrypt-证书\" aria-hidden=\"true\"></a></h1><p>强烈建议使用 <a href=\"https://github.com/Neilpang/acme.sh/tree/master/dnsapi\" target=\"_blank\" rel=\"noopener\">DNS API</a> 模式，支持列表详见 <a href=\"https://github.com/Neilpang/acme.sh#8-automatic-dns-api-integration\" target=\"_blank\" rel=\"noopener\">此处</a>。<br>我使用的是 cloudflare 的 DNS 服务，其他 DNS 提供商是否支持以及操作方式自行参考上面的两个链接，基本上主流 DNS 全部支持 API。<br>不支持的话考虑更换 DNS 吧，cloudflare 就是很好的选择。</p>\n<h2 id=\"获取-API-Key\" class=\"heading-control\"><a href=\"#获取-API-Key\" class=\"headerlink\" title=\"获取 API Key\"></a>获取 API Key<a class=\"heading-anchor\" href=\"#获取-API-Key\" aria-hidden=\"true\"></a></h2><ul>\n<li>访问 <a href=\"https://dash.cloudflare.com/profile\" target=\"_blank\" rel=\"noopener\">cloudflare 面板</a>。</li>\n<li>点击 API Keys 选项卡内 Global API Key 选项的 View 按钮取得 API key。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> CF_Key=<span class=\"string\">\"你的 cloudflare Global API Key\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CF_Email=<span class=\"string\">\"你的 cloudflare 注册邮箱\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"制作证书\" class=\"heading-control\"><a href=\"#制作证书\" class=\"headerlink\" title=\"制作证书\"></a>制作证书<a class=\"heading-anchor\" href=\"#制作证书\" aria-hidden=\"true\"></a></h2><p>我这里选择了 384 位 通配符 ECC 证书并开启 OCSP Must-Staple。也可以选择 256 位即使用 ec-256 参数，更多参数说明点击 <a href=\"https://github.com/Neilpang/acme.sh#san-multi-domain-ecc-certificate\" target=\"_blank\" rel=\"noopener\">这里</a> 及 <a href=\"https://github.com/Neilpang/acme.sh/wiki/Options-and-Params\" target=\"_blank\" rel=\"noopener\">Options and Params</a> 查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --issue --dns dns_cf -d your.domain -d <span class=\"string\">'*.your.domain'</span> -k ec-384 --ocsp</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装证书到-Nginx\" class=\"heading-control\"><a href=\"#安装证书到-Nginx\" class=\"headerlink\" title=\"安装证书到 Nginx\"></a>安装证书到 Nginx<a class=\"heading-anchor\" href=\"#安装证书到-Nginx\" aria-hidden=\"true\"></a></h1><blockquote>\n<p>这一步并不是必须，你可以手动复制或者直接引用原始证书地址，确保安全即可。</p>\n</blockquote>\n<p>acme.sh 内置 --installcert 命令，使用说明 <a href=\"https://github.com/Neilpang/acme.sh#3-install-the-cert-to-apachenginx-etc\" target=\"_blank\" rel=\"noopener\">在此</a>。这里假设你的 Nginx ssl 配置证书的路径为 /path/to/ecc，那么命令如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /path/to/ecc</span><br><span class=\"line\"><span class=\"comment\"># --ecc ECC 证书需要添加此参数，RSA 证书请忽略，两者路径并不相同。</span></span><br><span class=\"line\"><span class=\"comment\"># --reloadcmd 为 Nginx 重启或重载命令，请依据你自己的设置。</span></span><br><span class=\"line\">acme.sh --installcert --ecc -d your.domain \\</span><br><span class=\"line\">--key-file /path/to/ecc/your.doamin.key \\</span><br><span class=\"line\">--fullchain-file /path/to/ecc/fullchain.cer \\</span><br><span class=\"line\">--reloadcmd <span class=\"string\">\"service nginx restart\"</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"证书签发的限制\" class=\"heading-control\"><a href=\"#证书签发的限制\" class=\"headerlink\" title=\"证书签发的限制\"></a>证书签发的限制<a class=\"heading-anchor\" href=\"#证书签发的限制\" aria-hidden=\"true\"></a></h1><p>不要在短时间内高频率地签发证书，letsencrypt 是有着严格限制的。<br>感兴趣可以访问 <a href=\"https://letsencrypt.org/docs/rate-limits/\" target=\"_blank\" rel=\"noopener\">官方声明</a>了解详情。</p>\n","categories":["HTTPS"],"tags":["HTTPS"]},{"title":"Debian 安装 HAProxy","url":"/post/debian-install-haproxy.html","content":"<p><a href=\"https://www.haproxy.org/\" target=\"_blank\" rel=\"noopener\">HAProxy</a> 是一款老而弥坚的 TCP/HTTP 负载均衡，开发相当活跃。<br>本文将简单介绍 Debian 系统安装 HAProxy 的两种方式，即包管理与编译安装。<br>Ubuntu 用户也可以参考，没什么区别。<a id=\"more\"></a></p>\n<h1 id=\"包管理安装\" class=\"heading-control\"><a href=\"#包管理安装\" class=\"headerlink\" title=\"包管理安装\"></a>包管理安装<a class=\"heading-anchor\" href=\"#包管理安装\" aria-hidden=\"true\"></a></h1><p>没有特殊需求可以直接通过包管理工具也就是 apt 安装 HAProxy，具体步骤参考 <a href=\"https://haproxy.debian.net/#?distribution=Debian&release=stretch&version=1.9\" target=\"_blank\" rel=\"noopener\">Debian/Ubuntu HAProxy packages</a> 即可。<br>如果有特殊需求比如启用 TLS 1.3（目前来说 HAProxy 打包组没有启用 TLS 1.3）则需要自行使用 openssl 1.1.1 以上分支编译。<br>请继续阅读下文我个人的编译过程。每个人需求不同，所以仅供参考。</p>\n<h1 id=\"编译安装\" class=\"heading-control\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装<a class=\"heading-anchor\" href=\"#编译安装\" aria-hidden=\"true\"></a></h1><h2 id=\"准备工作\" class=\"heading-control\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作<a class=\"heading-anchor\" href=\"#准备工作\" aria-hidden=\"true\"></a></h2><h3 id=\"依赖\" class=\"heading-control\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖<a class=\"heading-anchor\" href=\"#依赖\" aria-hidden=\"true\"></a></h3><blockquote>\n<p>如果个别包提示冲突，可能是因为包来源不一致，此时需要统一使用 backports 或 默认源进行安装。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install build-essential libpcre2-dev zlib1g-dev libsystemd-dev liblua5.3-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OpenSSL\" class=\"heading-control\"><a href=\"#OpenSSL\" class=\"headerlink\" title=\"OpenSSL\"></a>OpenSSL<a class=\"heading-anchor\" href=\"#OpenSSL\" aria-hidden=\"true\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.1.1a.tar.gz</span><br><span class=\"line\">tar -xzf openssl-1.1.1a.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> openssl-1.1.1a</span><br><span class=\"line\"><span class=\"comment\"># 禁用动态链接库</span></span><br><span class=\"line\">./config --prefix=/opt/openssl-1.1.1a no-shared</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"><span class=\"built_in\">cd</span> .. &amp;&amp; rm -rf openssl-1.1.1a*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开始编译\" class=\"heading-control\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译<a class=\"heading-anchor\" href=\"#开始编译\" aria-hidden=\"true\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义 HAProxy 版本，目前主要分支为 1.9</span></span><br><span class=\"line\">HAPROXY_MAJOR=1.9</span><br><span class=\"line\">HAPROXY_VERSION=1.9.4</span><br><span class=\"line\"><span class=\"comment\"># 基础的编译参数，使用 gcc 编译的话移除 CC=clang 即可</span></span><br><span class=\"line\">CC=clang</span><br><span class=\"line\">CPU=native</span><br><span class=\"line\">TARGET=linux2628</span><br><span class=\"line\">PREFIX=/usr/<span class=\"built_in\">local</span>/haproxy</span><br><span class=\"line\"><span class=\"comment\"># 创建并进入工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> &amp;&amp; mkdir HAProxy &amp;&amp; <span class=\"built_in\">cd</span> HAProxy</span><br><span class=\"line\"><span class=\"comment\"># 下载 malloc 及 HAProxy 源码</span></span><br><span class=\"line\">wget -4 ftp://gee.cs.oswego.edu/pub/misc/malloc.c</span><br><span class=\"line\">wget -4 <span class=\"string\">\"http://www.haproxy.org/download/<span class=\"variable\">$&#123;HAPROXY_MAJOR&#125;</span>/src/haproxy-<span class=\"variable\">$&#123;HAPROXY_VERSION&#125;</span>.tar.gz\"</span></span><br><span class=\"line\">tar -xzf haproxy-<span class=\"variable\">$&#123;HAPROXY_VERSION&#125;</span>.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> haproxy-<span class=\"variable\">$&#123;HAPROXY_VERSION&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 此处可通过 make help 获取全部参数说明，务必仔细阅读</span></span><br><span class=\"line\">make \\</span><br><span class=\"line\">CC=<span class=\"variable\">$CC</span> \\</span><br><span class=\"line\">CPU=<span class=\"variable\">$CPU</span> \\</span><br><span class=\"line\">TARGET=<span class=\"variable\">$TARGET</span> \\</span><br><span class=\"line\">PREFIX=<span class=\"variable\">$PREFIX</span> \\</span><br><span class=\"line\">USE_DLMALLOC=1 \\</span><br><span class=\"line\">USE_PCRE2=1 \\</span><br><span class=\"line\">USE_PCRE2_JIT=1 \\</span><br><span class=\"line\">USE_THREAD=1 \\</span><br><span class=\"line\">USE_PTHREAD_PSHARED=1 \\</span><br><span class=\"line\">USE_LIBCRYPT=1 \\</span><br><span class=\"line\">USE_GETADDRINFO=1 \\</span><br><span class=\"line\">USE_OPENSSL=1 \\</span><br><span class=\"line\">USE_LUA=1 \\</span><br><span class=\"line\">USE_ZLIB=1 \\</span><br><span class=\"line\">USE_TFO=1 \\</span><br><span class=\"line\">USE_NS=1 \\</span><br><span class=\"line\">USE_SYSTEMD=1 \\</span><br><span class=\"line\">DLMALLOC_SRC=../malloc.c \\</span><br><span class=\"line\">SSL_LIB=/opt/openssl-1.1.1a/lib \\</span><br><span class=\"line\">SSL_INC=/opt/openssl-1.1.1a/include</span><br><span class=\"line\">make install PREFIX=<span class=\"variable\">$PREFIX</span></span><br><span class=\"line\">install -d /usr/sbin</span><br><span class=\"line\">install haproxy /usr/sbin</span><br><span class=\"line\">install -d /usr/<span class=\"built_in\">local</span>/share/man/man1  </span><br><span class=\"line\">install -m 644 doc/haproxy.1 /usr/<span class=\"built_in\">local</span>/share/man/man1</span><br><span class=\"line\">cp -ar <span class=\"variable\">$PREFIX</span>/doc/haproxy  /usr/<span class=\"built_in\">local</span>/doc/haproxy</span><br><span class=\"line\">mkdir -pv /var/lib/haproxy</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &amp;&amp; rm -rf HAProxy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证-HAProxy\" class=\"heading-control\"><a href=\"#验证-HAProxy\" class=\"headerlink\" title=\"验证 HAProxy\"></a>验证 HAProxy<a class=\"heading-anchor\" href=\"#验证-HAProxy\" aria-hidden=\"true\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找二进制文件并获取版本信息</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> haproxy &amp;&amp; haproxy -vv</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"收工\" class=\"heading-control\"><a href=\"#收工\" class=\"headerlink\" title=\"收工\"></a>收工<a class=\"heading-anchor\" href=\"#收工\" aria-hidden=\"true\"></a></h1><p>遇事不决请查阅文档，man haproxy 的话还是让人头大。<br>建议访问 <a href=\"https://cbonte.github.io/haproxy-dconv/\" target=\"_blank\" rel=\"noopener\">cbonte</a>，内有 HAProxy 全家桶。</p>\n","categories":["HAProxy"],"tags":["Debian","TLS 1.3"]}]